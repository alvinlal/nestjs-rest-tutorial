var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddPostDto.html",[0,0.079,1,1.876]],["body/classes/AddPostDto.html",[0,0.122,1,2.902,2,2.275,3,0.359,4,0.311,5,0.311,6,3.259,7,0.572,8,2.636,9,3.478,10,4.983,11,0.658,12,0.031,13,1.849,14,2.902,15,4.158,16,5.767,17,0.886,18,3.897,19,3.897,20,0.409,21,4.579,22,2.275,23,0.359,24,0.981,25,3.622,26,0.024,27,0.024]],["title/modules/AppModule.html",[28,0.877,29,2.082]],["body/modules/AppModule.html",[0,0.06,3,0.225,4,0.195,5,0.195,11,0.323,12,0.031,17,0.435,20,0.633,23,0.225,26,0.017,27,0.017,28,0.983,29,3.996,30,0.919,31,1.471,32,2.041,33,2.041,34,3.077,35,3.077,36,3.077,37,3.077,38,2.795,39,3.077,40,1.744,41,1.182,42,1.182,43,2.44,44,3.012,45,0.614,46,2.44,47,3.601,48,4.724,49,2.44,50,0.565,51,0.766,52,0.565,53,3.601,54,0.614,55,2.041,56,1.778,57,3.601,58,0.323,59,2.44,60,2.44,61,2.44,62,2.44,63,1.581,64,2.44,65,2.288,66,1.778,67,2.44,68,3.117,69,1.581,70,2.44,71,2.041,72,2.623,73,2.623,74,2.041,75,2.44,76,2.44,77,1.372,78,1.294,79,2.041,80,1.778,81,0.919,82,2.44,83,2.44,84,1.294,85,2.44,86,2.041,87,2.44,88,2.44,89,2.44,90,2.44,91,2.44,92,2.44,93,2.333,94,2.44,95,2.041,96,2.44,97,2.041,98,2.44,99,1.778,100,2.44,101,2.44,102,2.44,103,2.44,104,2.44]],["title/controllers/AuthController.html",[105,1.876,106,2.082]],["body/controllers/AuthController.html",[0,0.06,3,0.226,4,0.195,5,0.195,7,0.359,9,1.428,11,0.667,12,0.031,14,2.761,17,0.843,20,0.588,23,0.226,24,0.616,26,0.017,27,0.017,45,0.908,50,1.096,51,1.007,52,1.096,54,1.191,58,0.324,69,1.585,77,0.784,84,1.297,93,1.585,105,1.428,106,2.338,107,1.428,108,2.046,109,2.046,110,2.046,111,2.628,112,1.562,113,2.628,114,3.017,115,2.628,116,2.447,117,2.761,118,3.608,119,2.447,120,3.674,121,2.447,122,2.893,123,2.447,124,2.777,125,2.447,126,4.218,127,1.603,128,2.447,129,3.608,130,2.447,131,2.447,132,2.761,133,3.608,134,2.447,135,2.046,136,2.076,137,1.782,138,2.447,139,2.046,140,1.585,141,2.447,142,3.608,143,2.046,144,1.782,145,2.447,146,2.447,147,2.447,148,1.185,149,2.447,150,1.328,151,2.447,152,2.447,153,2.447,154,2.447,155,2.447,156,2.447,157,2.447,158,2.447,159,0.85,160,3.608,161,2.447,162,3.608,163,2.447,164,2.046,165,2.447,166,2.338,167,2.447,168,0.724]],["title/modules/AuthModule.html",[28,0.877,34,1.876]],["body/modules/AuthModule.html",[0,0.076,3,0.286,4,0.247,5,0.247,12,0.031,20,0.635,23,0.286,24,0.78,26,0.02,27,0.02,28,1.166,30,1.166,31,1.744,34,3.724,38,3.026,40,2.068,41,1.5,42,1.5,44,3.57,58,0.41,68,2.257,74,2.591,77,0.993,106,3.165,107,2.492,136,2.765,137,2.257,169,2.591,170,2.591,171,3.098,172,3.332,173,3.332,174,3.332,175,3.332,176,3.098,177,2.263,178,3.098,179,1.808,180,2.591,181,2.591,182,3.098,183,3.098,184,3.098,185,3.098]],["title/injectables/AuthService.html",[136,1.556,186,0.38]],["body/injectables/AuthService.html",[0,0.043,3,0.164,4,0.142,5,0.142,7,0.261,11,0.615,12,0.031,13,1.848,17,0.828,20,0.572,23,0.164,24,0.447,26,0.013,27,0.013,45,0.71,50,1.077,51,0.989,52,1.077,54,1.099,56,1.294,58,0.235,63,1.151,65,1.937,66,1.294,73,2.914,77,0.905,80,2.914,81,1.506,111,2.559,112,1.706,115,2.056,117,2.335,120,2.056,127,1.56,136,1.367,139,1.486,150,1.226,159,1.516,166,1.151,168,1.58,186,0.334,187,0.617,188,1.486,189,2.823,190,2.823,191,2.823,192,1.254,193,1.294,194,2.064,195,2.359,196,4.075,197,1.776,198,1.776,199,1.776,200,2.823,201,1.776,202,2.121,203,2.121,204,2.823,205,2.914,206,1.776,207,2.823,208,2.559,209,1.776,210,1.151,211,2.823,212,1.862,213,1.776,214,0.789,215,2.361,216,1.151,217,1.037,218,1.776,219,2.823,220,1.486,221,1.151,222,1.776,223,1.486,224,1.294,225,1.776,226,1.776,227,1.776,228,1.294,229,2.121,230,1.776,231,1.776,232,1.776,233,1.776,234,1.776,235,2.823,236,2.823,237,1.776,238,1.776,239,1.486,240,1.151,241,1.486,242,1.151,243,1.486,244,3.18,245,1.776,246,1.776,247,1.776,248,1.776,249,1.776,250,1.776,251,1.776,252,1.776,253,1.486,254,1.776,255,2.823,256,2.823,257,1.776,258,2.823,259,1.776,260,1.776,261,2.823,262,1.486,263,1.776,264,1.294,265,1.776]],["title/classes/ConfirmUserDto.html",[0,0.079,117,1.876]],["body/classes/ConfirmUserDto.html",[0,0.103,2,2.453,3,0.387,4,0.336,5,0.336,7,0.617,8,2.764,11,0.556,12,0.03,13,1.672,14,2.453,17,0.749,20,0.441,23,0.387,24,1.058,25,3.061,26,0.025,27,0.025,117,3.043,180,3.514,244,4.439,266,3.514,267,4.202,268,5.213,269,5.213,270,4.202,271,3.378]],["title/guards/IsAuthenticatedGuard.html",[272,2.341,273,2.082]],["body/guards/IsAuthenticatedGuard.html",[0,0.098,3,0.37,4,0.32,5,0.32,7,0.589,11,0.53,12,0.031,17,0.714,20,0.421,23,0.37,24,1.009,26,0.024,27,0.024,45,1.274,50,0.929,51,0.853,52,0.929,54,1.009,58,0.53,78,2.126,122,2.126,150,1.009,159,1.393,186,0.599,273,3.281,274,2.921,275,3.354,276,4.246,277,3.689,278,4.246,279,4.01,280,2.921,281,3.689,282,2.921,283,4.01]],["title/injectables/IsConfirmTokenValidConstraint.html",[172,1.876,186,0.38]],["body/injectables/IsConfirmTokenValidConstraint.html",[0,0.104,3,0.284,4,0.246,5,0.246,7,0.452,11,0.562,12,0.031,13,1.683,17,0.757,20,0.579,22,2.481,23,0.392,26,0.02,27,0.02,45,1.07,50,0.985,51,1.036,52,0.985,54,0.775,56,2.242,58,0.407,65,2.358,66,2.242,73,3.825,77,0.987,78,1.632,79,2.574,80,2.242,81,1.159,112,1.554,150,1.07,168,0.911,172,2.842,186,0.503,187,1.069,192,1.367,203,2.253,221,1.994,223,2.574,244,3.096,262,2.574,271,1.994,284,2.242,285,3.096,286,3.078,287,3.078,288,4.25,289,3.078,290,3.555,291,3.555,292,3.555,293,3.547,294,3.078,295,2.754,296,2.574,297,2.242,298,3.547,299,2.574,300,2.574,301,2.242,302,2.574]],["title/guards/IsConfirmedGuard.html",[272,2.341,303,2.082]],["body/guards/IsConfirmedGuard.html",[0,0.098,3,0.37,4,0.32,5,0.32,7,0.589,11,0.53,12,0.031,17,0.714,20,0.421,23,0.37,24,1.009,26,0.024,27,0.024,45,1.274,50,0.929,51,0.853,52,0.929,54,1.009,58,0.53,78,2.126,122,2.126,150,1.009,159,1.393,186,0.599,274,2.921,276,4.246,277,3.689,278,4.246,280,2.921,281,3.689,282,2.921,303,3.281,304,3.354,305,4.01,306,4.01]],["title/injectables/IsUserExistsConstraint.html",[173,1.876,186,0.38]],["body/injectables/IsUserExistsConstraint.html",[0,0.107,3,0.297,4,0.257,5,0.257,7,0.473,11,0.58,12,0.031,13,1.716,17,0.781,20,0.523,22,2.56,23,0.404,26,0.021,27,0.021,45,1.104,50,1.016,51,1.061,52,1.016,54,0.811,58,0.426,77,1.033,78,1.708,81,1.213,112,1.584,150,1.104,168,0.953,173,2.91,186,0.519,187,1.119,192,1.431,193,2.347,194,2.566,203,2.325,214,1.431,224,2.347,285,3.195,290,3.668,291,3.668,292,3.668,293,3.632,295,2.842,297,2.347,298,3.632,299,2.694,300,2.694,301,2.347,302,2.694,307,2.347,308,3.221,309,3.668,310,3.221,311,3.221,312,3.221,313,3.221,314,2.694]],["title/injectables/LocalAuthGuard.html",[140,2.082,186,0.38]],["body/injectables/LocalAuthGuard.html",[0,0.093,3,0.349,4,0.303,5,0.303,7,0.557,11,0.501,12,0.031,17,0.675,20,0.513,23,0.349,24,0.954,26,0.023,27,0.023,45,1.229,50,0.878,51,0.807,52,0.878,54,0.954,58,0.501,112,1.599,122,2.009,127,1.684,140,3.165,150,0.954,159,1.696,168,1.446,179,2.212,186,0.578,187,1.316,276,3.558,277,3.558,278,4.158,280,2.761,281,2.761,282,2.761,315,3.17,316,3.79,317,3.79,318,2.456,319,3.79,320,4.884,321,3.79,322,3.79]],["title/injectables/LocalStrategy.html",[174,1.876,186,0.38]],["body/injectables/LocalStrategy.html",[0,0.08,3,0.301,4,0.261,5,0.261,7,0.479,11,0.585,12,0.031,13,1.86,17,0.788,20,0.565,23,0.301,24,0.822,26,0.021,27,0.021,45,1.114,50,1.025,51,0.942,52,1.025,54,0.822,58,0.432,72,2.379,81,1.229,84,1.731,112,1.486,127,1.45,136,2.809,137,2.379,148,1.581,150,0.822,159,1.134,168,0.966,174,2.583,179,1.906,186,0.524,187,1.134,192,1.45,212,2.982,214,2.23,229,2.662,285,3.224,309,3.701,318,2.116,323,2.731,324,3.265,325,3.265,326,3.265,327,3.265,328,3.265,329,3.265,330,2.731,331,3.265,332,2.379,333,3.265,334,3.265,335,3.265,336,3.265,337,3.265]],["title/classes/LoginDto.html",[0,0.079,124,2.082]],["body/classes/LoginDto.html",[0,0.107,2,2.541,3,0.401,4,0.348,5,0.348,7,0.639,8,2.825,11,0.705,12,0.03,13,1.924,17,0.949,23,0.401,24,1.096,26,0.025,27,0.025,124,3.453,212,3.053,214,2.558,338,3.641,339,4.354,340,4.354]],["title/controllers/PostController.html",[105,1.876,341,2.082]],["body/controllers/PostController.html",[0,0.064,1,2.844,3,0.24,4,0.208,5,0.208,7,0.383,9,3.391,11,0.5,12,0.031,13,1.425,14,2.593,17,0.792,20,0.599,23,0.24,24,0.656,26,0.018,27,0.018,45,0.951,50,0.875,51,0.804,52,0.875,54,1.118,58,0.345,69,1.688,77,0.835,81,0.981,105,1.52,107,1.52,109,2.179,120,3.237,122,2.584,126,4.327,135,2.179,143,2.179,144,1.898,148,1.262,150,1.118,202,2.743,203,2.002,217,1.52,253,3.159,273,1.688,303,2.447,341,2.447,342,2.179,343,2.751,344,4.075,345,3.159,346,2.605,347,2.605,348,3.777,349,4.873,350,3.777,351,2.605,352,2.605,353,4.873,354,4.873,355,2.179,356,3.777,357,2.605,358,2.605,359,2.605,360,2.605,361,2.179,362,2.356,363,2.179,364,2.605,365,4.443,366,2.605,367,2.605,368,2.605,369,2.605,370,2.605,371,2.605,372,2.605,373,2.751,374,2.605,375,2.605,376,2.605,377,2.605]],["title/modules/PostModule.html",[28,0.877,35,1.876]],["body/modules/PostModule.html",[0,0.1,3,0.377,4,0.327,5,0.327,12,0.03,20,0.588,23,0.377,26,0.024,27,0.024,28,1.401,30,1.542,31,2.096,35,3.601,40,2.485,41,1.983,42,1.983,58,0.542,107,2.995,177,2.72,341,3.63,362,3.271,363,3.425,378,3.425,379,3.425,380,4.095,381,4.095]],["title/injectables/PostService.html",[186,0.38,362,1.704]],["body/injectables/PostService.html",[0,0.07,1,2.972,3,0.264,4,0.229,5,0.229,7,0.421,9,2.361,11,0.62,12,0.031,13,1.503,17,0.907,20,0.492,23,0.264,24,0.722,26,0.019,27,0.019,45,1.018,50,1.086,51,0.998,52,1.086,54,1.18,58,0.379,77,1.297,81,1.08,112,1.76,127,2.082,148,1.389,150,1.18,159,1.405,166,1.858,168,1.387,186,0.479,187,0.996,192,1.274,202,2.846,210,3.037,216,2.622,343,2.947,344,4.258,345,3.383,355,3.383,361,2.398,362,2.145,382,2.398,383,2.398,384,2.466,385,2.868,386,4.046,387,5.091,388,2.868,389,2.868,390,2.868,391,2.398,392,2.398,393,2.868,394,2.398,395,2.868,396,2.868]],["title/modules/PrismaModule.html",[28,0.877,36,1.876]],["body/modules/PrismaModule.html",[0,0.097,3,0.365,4,0.316,5,0.316,12,0.03,20,0.527,23,0.365,26,0.024,27,0.024,28,1.372,30,1.491,31,2.052,36,3.627,40,2.433,41,1.918,42,1.918,58,0.524,177,2.663,384,3.134,397,3.313,398,3.313,399,3.313,400,3.961,401,3.255,402,3.66,403,3.961]],["title/injectables/PrismaService.html",[186,0.38,384,1.556]],["body/injectables/PrismaService.html",[0,0.068,3,0.257,4,0.222,5,0.222,7,0.409,11,0.524,12,0.031,17,0.946,20,0.484,23,0.257,26,0.019,27,0.019,45,0.997,50,0.918,51,0.843,52,0.918,54,1.265,58,0.368,63,1.805,78,1.477,81,1.049,84,1.477,99,2.029,112,1.826,127,1.237,148,1.349,150,0.997,159,1.602,168,1.365,186,0.469,187,0.967,192,1.237,196,4.615,216,1.805,217,1.626,298,2.029,318,2.568,332,2.029,384,1.919,404,2.329,405,5.025,406,5.025,407,3.963,408,5.518,409,5.518,410,2.785,411,2.785,412,2.785,413,3.963,414,5.025,415,2.785,416,2.329,417,2.785,418,2.785,419,2.785,420,2.785,421,2.785,422,2.785,423,2.785,424,2.785,425,2.785,426,2.785,427,2.785,428,2.785,429,2.785,430,2.785]],["title/modules/RedisModule.html",[28,0.877,37,1.876]],["body/modules/RedisModule.html",[0,0.096,3,0.362,4,0.314,5,0.314,12,0.031,20,0.577,23,0.362,26,0.024,27,0.024,28,1.365,30,1.479,37,2.917,58,0.52,65,2.802,77,1.26,86,4.18,112,1.163,150,0.989,159,1.365,168,1.163,177,2.083,205,2.862,401,2.546,402,3.641,431,3.929,432,4.998,433,3.929,434,3.929,435,3.929,436,3.929,437,3.929,438,3.929]],["title/injectables/SessionSerializer.html",[175,1.876,186,0.38]],["body/injectables/SessionSerializer.html",[0,0.072,3,0.271,4,0.235,5,0.235,7,0.431,11,0.628,12,0.031,17,0.846,20,0.499,23,0.271,24,0.739,26,0.02,27,0.02,45,1.036,50,1.1,51,1.011,52,1.1,54,1.036,55,4.53,58,0.389,77,1.737,81,1.106,112,1.406,148,1.423,159,1.02,164,4.303,168,0.869,175,2.402,179,1.715,186,0.487,187,1.02,192,1.305,193,2.14,194,2.494,202,2.181,214,1.305,224,2.14,229,2.872,239,2.457,240,1.903,242,1.903,264,2.14,295,2.666,318,2.666,332,2.14,439,2.457,440,4.749,441,4.115,442,4.115,443,2.937,444,4.115,445,5.615,446,4.115,447,2.937,448,2.937,449,4.115,450,2.937,451,4.115,452,4.115,453,2.937]],["title/classes/SignupDto.html",[0,0.079,132,1.876]],["body/classes/SignupDto.html",[0,0.109,2,1.516,3,0.239,4,0.207,5,0.207,7,0.382,8,1.998,11,0.644,12,0.031,13,1.826,14,2.841,15,3.153,17,0.867,20,0.466,21,3.71,22,1.516,23,0.239,25,4.23,26,0.018,27,0.018,51,0.802,113,2.746,132,2.2,181,2.173,212,2.948,214,2.162,240,2.875,242,2.875,454,2.173,455,4.436,456,4.764,457,5.39,458,3.77,459,2.598,460,3.153,461,3.77,462,3.77,463,2.598,464,3.77,465,2.598,466,2.598,467,3.77,468,2.598,469,2.598,470,3.77,471,3.77,472,3.77,473,2.598,474,3.77,475,3.77,476,2.598,477,2.598,478,4.867,479,4.867,480,2.173,481,2.598,482,3.77,483,2.746,484,2.598,485,2.598,486,3.71,487,4.436]],["title/modules/UserModule.html",[28,0.877,38,1.704]],["body/modules/UserModule.html",[0,0.098,3,0.368,4,0.319,5,0.319,12,0.03,20,0.53,23,0.368,26,0.024,27,0.024,28,1.379,30,1.504,31,2.063,38,3.301,40,2.446,41,1.934,42,1.934,58,0.528,177,2.677,194,2.877,401,3.272,488,3.34,489,3.34,490,3.34,491,3.994,492,3.994]],["title/injectables/UserService.html",[186,0.38,194,1.427]],["body/injectables/UserService.html",[0,0.052,3,0.196,4,0.17,5,0.17,7,0.313,11,0.663,12,0.031,13,1.857,17,0.892,20,0.414,23,0.196,26,0.015,27,0.015,45,0.818,50,1.16,51,1.066,52,1.16,54,1.196,58,0.282,81,0.801,112,1.77,148,1.031,150,1.196,168,1.406,186,0.385,187,0.739,192,0.946,194,1.444,202,2.655,203,2.977,208,2.872,210,3.079,214,2.11,216,2.554,217,1.242,229,2.339,383,1.78,384,2.136,391,1.78,394,5.167,493,1.78,494,3.297,495,3.297,496,3.942,497,3.942,498,3.25,499,2.129,500,2.129,501,5.792,502,2.129,503,3.689,504,2.129,505,2.129,506,2.129,507,2.129,508,2.129,509,3.942,510,2.129,511,3.25,512,2.129,513,3.25,514,2.129,515,2.129,516,2.129]],["title/injectables/UtilService.html",[186,0.38,195,1.556]],["body/injectables/UtilService.html",[0,0.079,3,0.461,4,0.259,5,0.259,7,0.476,11,0.429,12,0.031,17,0.578,20,0.525,23,0.299,24,0.816,26,0.021,27,0.021,45,1.109,50,0.751,51,0.69,52,0.751,54,0.816,58,0.429,77,1.04,93,2.855,97,2.712,110,2.712,112,1.481,127,1.441,150,0.816,159,1.738,168,1.304,186,0.521,187,1.126,195,2.134,205,2.363,212,1.719,229,2.336,301,2.363,460,3.684,517,2.712,518,3.684,519,4.405,520,5.003,521,3.243,522,3.684,523,3.243,524,3.243,525,3.243,526,3.243,527,3.243,528,3.243,529,3.243,530,3.243,531,3.243,532,3.243,533,3.243,534,3.243,535,4.405,536,5.003,537,3.243,538,3.243,539,3.243,540,3.243,541,3.243,542,4.405,543,3.243,544,3.243,545,2.712,546,3.243,547,3.243,548,3.243,549,3.243]],["title/modules/UtilsModule.html",[28,0.877,39,1.876]],["body/modules/UtilsModule.html",[0,0.098,3,0.368,4,0.319,5,0.319,12,0.03,20,0.53,23,0.368,26,0.024,27,0.024,28,1.379,30,1.504,31,2.063,39,3.634,40,2.446,41,1.934,42,1.934,58,0.528,177,2.677,195,3.137,401,3.272,402,3.679,550,3.34,551,3.34,552,3.34,553,3.994,554,3.994]],["title/coverage.html",[555,3.189]],["body/coverage.html",[0,0.114,1,1.396,5,0.191,6,2.001,11,0.316,12,0.031,26,0.017,27,0.017,65,1.159,84,1.268,105,2.071,106,1.55,108,2.001,117,1.396,124,1.55,132,1.396,136,1.159,140,1.55,172,1.396,173,1.396,174,1.396,175,1.396,186,0.685,188,2.001,194,1.063,195,1.159,221,1.55,266,2.001,271,1.55,272,2.585,273,1.55,275,2.001,284,2.585,295,2.741,303,1.55,304,2.001,307,2.585,315,2.001,323,2.001,338,2.001,341,1.55,342,2.001,362,1.268,382,2.001,384,1.159,404,2.001,439,2.001,454,2.001,483,1.743,493,2.001,517,2.001,555,1.743,556,2.392,557,2.392,558,2.392,559,2.001,560,5.94,561,6.487,562,6.105,563,4.229,564,3.548,565,4.997,566,4.997,567,2.392,568,2.001,569,2.001,570,2.392,571,2.392,572,2.001,573,2.001,574,2.392,575,2.001,576,4.654,577,2.001,578,2.001,579,2.001,580,2.001,581,2.001,582,2.001,583,2.001,584,2.001,585,2.001,586,2.001,587,2.001,588,2.001,589,2.001,590,2.001,591,2.001,592,2.001,593,2.001,594,2.001,595,2.392,596,2.392]],["title/dependencies.html",[31,1.578,597,2.247]],["body/dependencies.html",[0,0.112,12,0.031,22,2.007,26,0.022,27,0.022,31,1.405,58,0.455,63,2.229,65,2.22,68,3.339,69,3.34,71,2.876,72,3.755,95,2.876,144,2.506,179,2.007,215,2.876,217,2.007,220,2.876,330,3.833,480,2.876,522,2.876,598,5.154,599,3.439,600,3.439,601,3.439,602,4.583,603,3.439,604,3.439,605,4.583,606,3.439,607,3.439,608,3.439,609,3.439,610,3.439,611,3.439,612,3.439,613,3.439,614,3.439,615,3.439,616,3.439,617,3.439,618,3.439,619,3.439,620,3.439,621,3.439,622,3.439,623,3.439,624,3.439,625,3.439,626,3.439,627,3.439,628,3.439,629,3.439,630,3.439,631,3.439,632,3.439]],["title/miscellaneous/functions.html",[633,1.741,634,3.231]],["body/miscellaneous/functions.html",[7,0.631,11,0.699,12,0.028,26,0.025,27,0.025,50,1.224,51,1.125,52,1.224,271,3.424,284,3.129,293,4.548,296,3.592,307,3.129,314,3.592,483,3.85,503,4.42,568,3.592,569,4.787,633,2.783,634,3.592,635,4.295,636,4.295,637,4.295]],["title/index.html",[7,0.395,638,2.687,639,2.687]],["body/index.html",[4,0.275,12,0.031,26,0.022,27,0.022,99,2.506,373,2.506,416,2.876,456,2.876,555,2.506,640,3.439,641,3.439,642,4.583,643,3.439,644,3.439,645,3.439,646,3.439,647,3.439,648,3.439,649,5.154,650,3.439,651,3.439,652,3.439,653,3.439,654,6.01,655,3.439,656,3.439,657,5.888,658,3.439,659,3.439,660,4.583,661,3.439,662,3.439,663,3.439,664,4.583,665,4.583,666,3.439,667,3.439,668,3.439,669,4.583,670,4.583,671,3.439,672,3.439,673,3.439,674,3.439,675,3.439,676,2.876,677,3.439,678,3.439,679,3.439,680,3.439,681,3.439,682,3.439,683,3.439,684,3.439,685,3.439,686,2.506,687,3.439,688,3.439,689,3.439,690,3.439,691,3.439,692,3.439,693,2.876]],["title/modules.html",[30,1.648]],["body/modules.html",[12,0.025,26,0.025,27,0.025,29,2.796,30,1.624,34,2.518,35,2.518,36,2.518,37,2.518,38,2.287,39,2.518,545,3.608,676,5.227,694,6.25,695,6.25,696,6.331,697,4.315]],["title/overview.html",[698,3.661]],["body/overview.html",[2,1.684,12,0.031,26,0.019,27,0.019,29,4.05,30,1.086,31,1.66,32,2.413,33,2.413,34,3.67,35,3.141,36,3.258,37,2.745,38,3.041,39,3.258,40,1.968,41,1.397,42,1.397,107,1.684,136,2.278,169,2.413,170,2.413,172,2.745,173,2.745,174,2.745,175,2.745,187,1.002,194,2.548,195,2.778,228,2.102,274,2.102,362,2.493,378,2.413,379,2.413,384,2.778,397,2.413,398,2.413,399,2.413,488,2.413,489,2.413,490,2.413,550,2.413,551,2.413,552,2.413,698,2.413,699,2.885,700,4.063,701,2.885]],["title/properties.html",[8,2.048,597,2.247]],["body/properties.html",[8,2.562,12,0.03,26,0.027,27,0.027,373,3.521,686,3.521,693,4.042,702,4.833,703,4.833,704,4.833]],["title/miscellaneous/variables.html",[633,1.741,705,3.231]],["body/miscellaneous/variables.html",[7,0.255,9,1.617,10,1.451,11,0.663,12,0.032,13,0.888,24,1.386,26,0.013,27,0.013,65,1.342,77,0.888,84,1.469,93,1.124,111,1.264,112,0.513,113,1.264,114,1.451,115,1.264,122,0.92,127,0.771,132,1.013,150,1.301,166,1.795,168,0.82,195,0.84,202,2.809,203,0.92,208,2.018,210,1.124,212,1.833,214,1.536,221,1.795,228,2.018,229,2.093,240,3.248,241,1.451,242,3.248,243,1.451,264,1.264,297,3.35,343,1.264,392,2.317,486,4.607,494,1.451,495,1.451,518,1.451,559,1.451,572,1.451,573,2.317,575,1.451,576,4.192,577,1.451,578,2.317,579,1.451,580,2.317,581,1.451,582,2.317,583,1.451,584,2.317,585,1.451,586,2.317,587,1.451,588,2.317,589,1.451,590,2.317,591,1.451,592,2.317,593,1.451,594,2.317,633,1.124,686,1.264,705,1.451,706,1.735,707,1.735,708,1.735,709,1.735,710,1.735,711,1.735,712,1.735,713,1.735,714,1.735,715,1.735,716,1.735,717,1.735,718,1.735,719,1.735,720,5.299,721,1.735,722,1.735,723,4.827,724,3.947,725,4.314,726,4.314,727,1.735,728,1.735,729,2.77,730,1.735,731,1.735,732,1.735,733,1.735,734,1.735,735,1.735,736,1.735,737,1.735,738,1.735,739,2.77,740,1.735,741,1.735,742,2.77,743,2.77,744,1.735,745,1.735,746,1.735,747,1.735,748,1.735,749,1.735,750,1.735,751,1.735,752,1.735,753,1.735,754,1.735,755,1.735,756,1.735,757,1.735,758,1.735,759,1.735,760,1.735,761,1.735,762,1.735,763,1.735,764,1.735,765,1.735]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":703,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["1.17.5",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2",{"_index":700,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["2160000000",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["250",{"_index":753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["394",{"_index":749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":701,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["465",{"_index":532,"title":{},"body":{"injectables/UtilService.html":{}}}],["482",{"_index":747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.0.1",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["587",{"_index":531,"title":{},"body":{"injectables/UtilService.html":{}}}],["6",{"_index":472,"title":{},"body":{"classes/SignupDto.html":{}}}],["6.0.4",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["6.7.7",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":699,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["775",{"_index":751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.3.2",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["accepted",{"_index":742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["account",{"_index":460,"title":{},"body":{"classes/SignupDto.html":{},"injectables/UtilService.html":{}}}],["account.pass",{"_index":538,"title":{},"body":{"injectables/UtilService.html":{}}}],["account.user",{"_index":534,"title":{},"body":{"injectables/UtilService.html":{}}}],["addpost",{"_index":343,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["addpost(@body",{"_index":370,"title":{},"body":{"controllers/PostController.html":{}}}],["addpost(body",{"_index":346,"title":{},"body":{"controllers/PostController.html":{}}}],["addpost(data",{"_index":386,"title":{},"body":{"injectables/PostService.html":{}}}],["addpostdto",{"_index":1,"title":{"classes/AddPostDto.html":{}},"body":{"classes/AddPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["address",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["already",{"_index":461,"title":{},"body":{"classes/SignupDto.html":{}}}],["amazing",{"_index":677,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiokresponse",{"_index":365,"title":{},"body":{"controllers/PostController.html":{}}}],["apiokresponse({description",{"_index":348,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["apitags('auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('post",{"_index":367,"title":{},"body":{"controllers/PostController.html":{}}}],["app",{"_index":416,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":422,"title":{},"body":{"injectables/PrismaService.html":{}}}],["applications",{"_index":648,"title":{},"body":{"index.html":{}}}],["apply",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["atleast",{"_index":471,"title":{},"body":{"classes/SignupDto.html":{}}}],["auth",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UtilService.html":{}}}],["auth.constants",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.controller",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.constants",{"_index":294,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{}}}],["auth/auth.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/isauthenticated.guard",{"_index":360,"title":{},"body":{"controllers/PostController.html":{}}}],["auth/guard/isconfirmed.guard",{"_index":364,"title":{},"body":{"controllers/PostController.html":{}}}],["authcontroller",{"_index":106,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":317,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard('local",{"_index":319,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":34,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":686,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorid",{"_index":392,"title":{},"body":{"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":136,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":545,"title":{},"body":{"injectables/UtilService.html":{},"modules.html":{}}}],["await",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":678,"title":{},"body":{"index.html":{}}}],["bc0uix8",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash('123456",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash('test",{"_index":741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data.password",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{}}}],["boolean",{"_index":281,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["bootstrap",{"_index":569,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":696,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":694,"title":{},"body":{"modules.html":{}}}],["building",{"_index":643,"title":{},"body":{"index.html":{}}}],["callback",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":276,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["canactivate(context",{"_index":277,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["characters",{"_index":484,"title":{},"body":{"classes/SignupDto.html":{}}}],["characters'})@notcontains",{"_index":473,"title":{},"body":{"classes/SignupDto.html":{}}}],["class",{"_index":0,"title":{"classes/AddPostDto.html":{},"classes/ConfirmUserDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{}},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddPostDto.html":{},"classes/ConfirmUserDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"overview.html":{}}}],["cleandatabase",{"_index":406,"title":{},"body":{"injectables/PrismaService.html":{}}}],["client",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{}}}],["client.connect",{"_index":438,"title":{},"body":{"modules/RedisModule.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":378,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":379,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":397,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":398,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":399,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":488,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":489,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":490,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_utilsmodule",{"_index":550,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["cluster_utilsmodule_exports",{"_index":551,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["cluster_utilsmodule_providers",{"_index":552,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["config",{"_index":334,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["configmodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{}}}],["configure",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["confirmed",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionSerializer.html":{},"miscellaneous/variables.html":{}}}],["confirmuser",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["confirmuser(@body",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmuser(body",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmuser(undefined",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmuserdto",{"_index":117,"title":{"classes/ConfirmUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"coverage.html":{}}}],["confirmuserprefix",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["connect",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["console.error(err",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('message",{"_index":540,"title":{},"body":{"injectables/UtilService.html":{}}}],["console.log('preview",{"_index":548,"title":{},"body":{"injectables/UtilService.html":{}}}],["const",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"injectables/UtilService.html":{}}}],["constraints",{"_index":302,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["constructor",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(redis",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["constructor(authservice",{"_index":324,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":410,"title":{},"body":{"injectables/PrismaService.html":{}}}],["constructor(prisma",{"_index":383,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{}}}],["constructor(protected",{"_index":312,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{}}}],["constructor(redis",{"_index":286,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{}}}],["constructor(userservice",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/SessionSerializer.html":{}}}],["consumer",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":474,"title":{},"body":{"classes/SignupDto.html":{}}}],["context",{"_index":280,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":282,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["controller",{"_index":105,"title":{"controllers/AuthController.html":{},"controllers/PostController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('post",{"_index":368,"title":{},"body":{"controllers/PostController.html":{}}}],["controllers",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["cookie",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["coverage",{"_index":555,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createclient",{"_index":432,"title":{},"body":{"modules/RedisModule.html":{}}}],["createconfirmationurl",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["createconfirmationurl(id",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["createdat",{"_index":738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":494,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["createuser(user",{"_index":500,"title":{},"body":{"injectables/UserService.html":{}}}],["data",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.firstname",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.lastname",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.password",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"classes/AddPostDto.html":{},"controllers/AuthController.html":{},"classes/ConfirmUserDto.html":{},"controllers/PostController.html":{},"classes/SignupDto.html":{}}}],["default",{"_index":24,"title":{},"body":{"classes/AddPostDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SessionSerializer.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":373,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"properties.html":{}}}],["deserializeuser",{"_index":441,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["deserializeuser(payload",{"_index":444,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["development",{"_index":656,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":445,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["done(null",{"_index":452,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["dto",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.firstname",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto.lastname",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto/addpost.dto",{"_index":361,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto/confirmuser.dto",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/login.dto",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["e2e",{"_index":666,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":644,"title":{},"body":{"index.html":{}}}],["email",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["email'})@isuserexists({message",{"_index":459,"title":{},"body":{"classes/SignupDto.html":{}}}],["empty",{"_index":16,"title":{},"body":{"classes/AddPostDto.html":{}}}],["enableshutdownhooks",{"_index":407,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":413,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enter",{"_index":457,"title":{},"body":{"classes/SignupDto.html":{}}}],["envelope",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["envelopetime",{"_index":746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionSerializer.html":{}}}],["error",{"_index":451,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["error,user",{"_index":446,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["ethereal",{"_index":536,"title":{},"body":{"injectables/UtilService.html":{}}}],["executioncontext",{"_index":278,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["exists",{"_index":462,"title":{},"body":{"classes/SignupDto.html":{}}}],["expired",{"_index":269,"title":{},"body":{"classes/ConfirmUserDto.html":{}}}],["export",{"_index":23,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{}}}],["exports",{"_index":401,"title":{},"body":{"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{}}}],["express",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"dependencies.html":{}}}],["extends",{"_index":318,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{}}}],["faker.datatype.uuid",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.internet.email",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.internet.password",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.lorem.sentence",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.lorem.sentences(10",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.name.firstname",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.name.lastname",{"_index":726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["fetches",{"_index":354,"title":{},"body":{"controllers/PostController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{}}}],["find",{"_index":356,"title":{},"body":{"controllers/PostController.html":{}}}],["findallposts",{"_index":344,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["findbyemail",{"_index":495,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["findbyemail(email",{"_index":504,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":496,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(id",{"_index":506,"title":{},"body":{"injectables/UserService.html":{}}}],["findfirst",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findpostbyid",{"_index":345,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["findpostbyid(@param('id",{"_index":376,"title":{},"body":{"controllers/PostController.html":{}}}],["findpostbyid(id",{"_index":355,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["first",{"_index":464,"title":{},"body":{"classes/SignupDto.html":{}}}],["firstname",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"miscellaneous/variables.html":{}}}],["foo",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["foo@example.com",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forroutes",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["framework",{"_index":642,"title":{},"body":{"index.html":{}}}],["fred",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":295,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/SessionSerializer.html":{},"coverage.html":{}}}],["functions",{"_index":634,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":535,"title":{},"body":{"injectables/UtilService.html":{}}}],["get(':id",{"_index":375,"title":{},"body":{"controllers/PostController.html":{}}}],["getting",{"_index":638,"title":{"index.html":{}},"body":{}}],["global",{"_index":402,"title":{},"body":{"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UtilsModule.html":{}}}],["graph",{"_index":697,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":673,"title":{},"body":{"index.html":{}}}],["guard",{"_index":272,"title":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{}},"body":{"coverage.html":{}}}],["guard/localauth.guard",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards",{"_index":274,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"overview.html":{}}}],["hello",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["here",{"_index":683,"title":{},"body":{"index.html":{}}}],["host",{"_index":528,"title":{},"body":{"injectables/UtilService.html":{}}}],["html",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["httponly",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":690,"title":{},"body":{"index.html":{}}}],["id",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["id'})@get(':id",{"_index":357,"title":{},"body":{"controllers/PostController.html":{}}}],["identifier",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":20,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AddPostDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":414,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{}}}],["info.messageid",{"_index":543,"title":{},"body":{"injectables/UtilService.html":{}}}],["inject",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["inject(redis",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":186,"title":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{}},"body":{"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["injectables",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"overview.html":{}}}],["installation",{"_index":653,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":655,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":268,"title":{},"body":{"classes/ConfirmUserDto.html":{}}}],["isarray",{"_index":350,"title":{},"body":{"controllers/PostController.html":{}}}],["isauthenticatedguard",{"_index":273,"title":{"guards/IsAuthenticatedGuard.html":{}},"body":{"guards/IsAuthenticatedGuard.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["isconfirmedguard",{"_index":303,"title":{"guards/IsConfirmedGuard.html":{}},"body":{"guards/IsConfirmedGuard.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["isconfirmtokenvalid",{"_index":271,"title":{},"body":{"classes/ConfirmUserDto.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isconfirmtokenvalid(validationoptions",{"_index":296,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"miscellaneous/functions.html":{}}}],["isconfirmtokenvalid({message",{"_index":267,"title":{},"body":{"classes/ConfirmUserDto.html":{}}}],["isconfirmtokenvalidconstraint",{"_index":172,"title":{"injectables/IsConfirmTokenValidConstraint.html":{}},"body":{"modules/AuthModule.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"coverage.html":{},"overview.html":{}}}],["isemail",{"_index":455,"title":{},"body":{"classes/SignupDto.html":{}}}],["isemailexists",{"_index":311,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{}}}],["isglobal",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":21,"title":{},"body":{"classes/AddPostDto.html":{},"classes/SignupDto.html":{}}}],["isnotempty({message",{"_index":15,"title":{},"body":{"classes/AddPostDto.html":{},"classes/SignupDto.html":{}}}],["isuserexists",{"_index":483,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isuserexists(validationoptions",{"_index":314,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{},"miscellaneous/functions.html":{}}}],["isuserexistsconstraint",{"_index":173,"title":{"injectables/IsUserExistsConstraint.html":{}},"body":{"modules/AuthModule.html":{},"injectables/IsUserExistsConstraint.html":{},"coverage.html":{},"overview.html":{}}}],["isvalid",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["jest.fn",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((callback",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((dto",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((key",{"_index":727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn(async",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":680,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["kamil",{"_index":687,"title":{},"body":{"index.html":{}}}],["key",{"_index":728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":467,"title":{},"body":{"classes/SignupDto.html":{}}}],["lastname",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"miscellaneous/variables.html":{}}}],["legacymode",{"_index":436,"title":{},"body":{"modules/RedisModule.html":{}}}],["letter,symbols",{"_index":475,"title":{},"body":{"classes/SignupDto.html":{}}}],["license",{"_index":693,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":670,"title":{},"body":{"index.html":{}}}],["line",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["list",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{}}}],["local",{"_index":330,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":140,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":174,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logerrors",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignupDto.html":{},"miscellaneous/variables.html":{}}}],["login(@req",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":124,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["logout(@req",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutpromise",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["mail",{"_index":523,"title":{},"body":{"injectables/UtilService.html":{}}}],["mail.options",{"_index":520,"title":{},"body":{"injectables/UtilService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxage",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":25,"title":{},"body":{"classes/AddPostDto.html":{},"classes/ConfirmUserDto.html":{},"classes/SignupDto.html":{}}}],["messageid",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagesize",{"_index":750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagetime",{"_index":748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":353,"title":{},"body":{"controllers/PostController.html":{}}}],["methods",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{}}}],["middlewareconsumer",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["minlength",{"_index":481,"title":{},"body":{"classes/SignupDto.html":{}}}],["minlength(6",{"_index":470,"title":{},"body":{"classes/SignupDto.html":{}}}],["miscellaneous",{"_index":633,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":669,"title":{},"body":{"index.html":{}}}],["mockauthservice",{"_index":580,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockconfigservice",{"_index":582,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockpostservice",{"_index":584,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockprismaservice",{"_index":586,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockredisservice",{"_index":588,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockrequest",{"_index":578,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockuserservice",{"_index":590,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockutilservice",{"_index":592,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":660,"title":{},"body":{"index.html":{}}}],["modelnames",{"_index":426,"title":{},"body":{"injectables/PrismaService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":682,"title":{},"body":{"index.html":{}}}],["msgid=yslz4mnyhere3klaysl0qzbmr1scridwaaaaamrsw1.gjzewfdy",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":688,"title":{},"body":{"index.html":{}}}],["name",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/functions.html":{}}}],["name'})@transform",{"_index":465,"title":{},"body":{"classes/SignupDto.html":{}}}],["name.'})@transform",{"_index":468,"title":{},"body":{"classes/SignupDto.html":{}}}],["nest",{"_index":649,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":692,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionSerializer.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"dependencies.html":{}}}],["nestmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":641,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":522,"title":{},"body":{"injectables/UtilService.html":{},"dependencies.html":{}}}],["nodemailer.createtestaccount",{"_index":525,"title":{},"body":{"injectables/UtilService.html":{}}}],["nodemailer.createtransport",{"_index":527,"title":{},"body":{"injectables/UtilService.html":{}}}],["nodemailer.gettestmessageurl(info",{"_index":549,"title":{},"body":{"injectables/UtilService.html":{}}}],["nodemailer/lib/mailer",{"_index":524,"title":{},"body":{"injectables/UtilService.html":{}}}],["notcontains",{"_index":482,"title":{},"body":{"classes/SignupDto.html":{}}}],["npm",{"_index":654,"title":{},"body":{"index.html":{}}}],["null",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["numbers",{"_index":485,"title":{},"body":{"classes/SignupDto.html":{}}}],["numbers'})@transform",{"_index":476,"title":{},"body":{"classes/SignupDto.html":{}}}],["object",{"_index":297,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"miscellaneous/variables.html":{}}}],["object.constructor",{"_index":300,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["object.getownpropertynames(prisma",{"_index":425,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduledestroy",{"_index":408,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":409,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":671,"title":{},"body":{"index.html":{}}}],["optional",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":301,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/UtilService.html":{}}}],["out",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["overview",{"_index":698,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":597,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":359,"title":{},"body":{"controllers/PostController.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":537,"title":{},"body":{"injectables/UtilService.html":{}}}],["passport",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport.initialize",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["passport.session",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["passportmodule",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportserializer",{"_index":440,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["passportstrategy",{"_index":328,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":331,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":448,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["pending",{"_index":745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plain",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":456,"title":{},"body":{"classes/SignupDto.html":{},"index.html":{}}}],["port",{"_index":530,"title":{},"body":{"injectables/UtilService.html":{}}}],["ports",{"_index":533,"title":{},"body":{"injectables/UtilService.html":{}}}],["post",{"_index":9,"title":{},"body":{"classes/AddPostDto.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["post('/confirm",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/logout",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.controller",{"_index":381,"title":{},"body":{"modules/PostModule.html":{}}}],["post.service",{"_index":363,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["post/post.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":341,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postmodule",{"_index":35,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["posts",{"_index":349,"title":{},"body":{"controllers/PostController.html":{}}}],["postservice",{"_index":362,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["poststub",{"_index":573,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["posttype",{"_index":366,"title":{},"body":{"controllers/PostController.html":{}}}],["prefix",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["preview",{"_index":544,"title":{},"body":{"injectables/UtilService.html":{}}}],["prisma",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["prisma.postcreateinput",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma.service",{"_index":403,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["prisma.userselect",{"_index":501,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userupdateinput",{"_index":509,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":391,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["prisma[model].deletemany",{"_index":430,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclient",{"_index":405,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":36,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":384,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["process.env.node_env",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.redis_url",{"_index":437,"title":{},"body":{"modules/RedisModule.html":{}}}],["process.env.session_secret",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["progressive",{"_index":640,"title":{},"body":{"index.html":{}}}],["project",{"_index":672,"title":{},"body":{"index.html":{}}}],["promise",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["promise((resolve",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["promise.all(modelnames.map((model",{"_index":429,"title":{},"body":{"injectables/PrismaService.html":{}}}],["promise.resolve",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/AddPostDto.html":{},"classes/ConfirmUserDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"properties.html":{}}}],["propertyname",{"_index":298,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/PrismaService.html":{}}}],["propertyname.startswith('_",{"_index":428,"title":{},"body":{"injectables/PrismaService.html":{}}}],["propertynames",{"_index":424,"title":{},"body":{"injectables/PrismaService.html":{}}}],["propertynames.filter",{"_index":427,"title":{},"body":{"injectables/PrismaService.html":{}}}],["provide",{"_index":434,"title":{},"body":{"modules/RedisModule.html":{}}}],["providers",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{}}}],["qid",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":681,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{}}}],["receivers",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["redis",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"modules/RedisModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["redis.constants",{"_index":433,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis/client",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["redis/redis.constants",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["redis/redis.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["redisclienttype",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["redismodule",{"_index":37,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisstore",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore(session",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["reflect",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["registerdecorator",{"_index":290,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["reject",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["rejected",{"_index":744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":652,"title":{},"body":{"index.html":{}}}],["req",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["req.logout((err",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.id",{"_index":372,"title":{},"body":{"controllers/PostController.html":{}}}],["request",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["request.isauthenticated",{"_index":283,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{}}}],["request.user.confirmed",{"_index":306,"title":{},"body":{"guards/IsConfirmedGuard.html":{}}}],["resave",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["resolve",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["response",{"_index":752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result",{"_index":320,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["results",{"_index":26,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{}}}],["rimraf",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":657,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":542,"title":{},"body":{"injectables/UtilService.html":{}}}],["saveuninitialized",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["scalable",{"_index":645,"title":{},"body":{"index.html":{}}}],["secret",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["secure",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"injectables/UtilService.html":{}}}],["select",{"_index":394,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["sendconfirmationmail",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendconfirmationmail(to",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["sender",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["sending",{"_index":546,"title":{},"body":{"injectables/UtilService.html":{}}}],["sendmail",{"_index":518,"title":{},"body":{"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["sendmail(options",{"_index":519,"title":{},"body":{"injectables/UtilService.html":{}}}],["sent",{"_index":541,"title":{},"body":{"injectables/UtilService.html":{}}}],["serializeuser",{"_index":442,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["serializeuser(user",{"_index":449,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["server",{"_index":646,"title":{},"body":{"index.html":{}}}],["session",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["session.serializer",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["sessionserializer",{"_index":175,"title":{"injectables/SessionSerializer.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SessionSerializer.html":{},"coverage.html":{},"overview.html":{}}}],["setex",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":647,"title":{},"body":{"index.html":{}}}],["signup",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["signup(@body",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(data",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupdto",{"_index":132,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["smtp.ethereal.email",{"_index":529,"title":{},"body":{"injectables/UtilService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"index.html":{}}}],["sponsors",{"_index":675,"title":{},"body":{"index.html":{}}}],["src/.../auth.constants.ts",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../isconfirmtokenvalid.validator.ts",{"_index":636,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../isuserexists.validator.ts",{"_index":637,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":635,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mockauthservice.ts",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockconfigservice.ts",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockpostservice.ts",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockprismaservice.ts",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockredisservice.ts",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockrequest.ts",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockuserservice.ts",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockutilservice.ts",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../post.stub.ts",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../redis.constants.ts",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../userstub.ts",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:30",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.constants.ts",{"_index":559,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.controller.ts",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:62",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/confirmuser.dto.ts",{"_index":266,"title":{},"body":{"classes/ConfirmUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/confirmuser.dto.ts:5",{"_index":270,"title":{},"body":{"classes/ConfirmUserDto.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":338,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:2",{"_index":339,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:3",{"_index":340,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/signup.dto.ts",{"_index":454,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/auth/dto/signup.dto.ts:15",{"_index":477,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/dto/signup.dto.ts:19",{"_index":466,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/dto/signup.dto.ts:23",{"_index":469,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/dto/signup.dto.ts:8",{"_index":463,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/guard/isauthenticated.guard.ts",{"_index":275,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"coverage.html":{}}}],["src/auth/guard/isauthenticated.guard.ts:5",{"_index":279,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{}}}],["src/auth/guard/isconfirmed.guard.ts",{"_index":304,"title":{},"body":{"guards/IsConfirmedGuard.html":{},"coverage.html":{}}}],["src/auth/guard/isconfirmed.guard.ts:5",{"_index":305,"title":{},"body":{"guards/IsConfirmedGuard.html":{}}}],["src/auth/guard/localauth.guard.ts",{"_index":315,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/localauth.guard.ts:6",{"_index":316,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["src/auth/session.serializer.ts",{"_index":439,"title":{},"body":{"injectables/SessionSerializer.html":{},"coverage.html":{}}}],["src/auth/session.serializer.ts:10",{"_index":450,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["src/auth/session.serializer.ts:14",{"_index":447,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["src/auth/session.serializer.ts:6",{"_index":443,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["src/auth/strategy/local.strategy.ts",{"_index":323,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/local.strategy.ts:11",{"_index":326,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts:7",{"_index":325,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/main.ts",{"_index":568,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/dto/addpost.dto.ts",{"_index":6,"title":{},"body":{"classes/AddPostDto.html":{},"coverage.html":{}}}],["src/post/dto/addpost.dto.ts:5",{"_index":19,"title":{},"body":{"classes/AddPostDto.html":{}}}],["src/post/dto/addpost.dto.ts:8",{"_index":18,"title":{},"body":{"classes/AddPostDto.html":{}}}],["src/post/post.controller.ts",{"_index":342,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:24",{"_index":347,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:33",{"_index":352,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:41",{"_index":358,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.module.ts",{"_index":380,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":382,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:21",{"_index":389,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:25",{"_index":390,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:6",{"_index":385,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:9",{"_index":388,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/test/stubs/post.stub.ts",{"_index":572,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/prisma/prisma.module.ts",{"_index":400,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":404,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:14",{"_index":411,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:18",{"_index":418,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:22",{"_index":417,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:26",{"_index":415,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:32",{"_index":412,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/redis/redis.constants.ts",{"_index":575,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/redis/redis.module.ts",{"_index":431,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/test",{"_index":576,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/test/stubs/userstub.ts",{"_index":593,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.module.ts",{"_index":491,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":493,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:19",{"_index":507,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:29",{"_index":502,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:39",{"_index":510,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:51",{"_index":512,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:6",{"_index":499,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":505,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/utils.module.ts",{"_index":553,"title":{},"body":{"modules/UtilsModule.html":{}}}],["src/utils/utils.service.ts",{"_index":517,"title":{},"body":{"injectables/UtilService.html":{},"coverage.html":{}}}],["src/utils/utils.service.ts:7",{"_index":521,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/validators/isconfirmtokenvalid.validator.ts",{"_index":284,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/validators/isconfirmtokenvalid.validator.ts:16",{"_index":287,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{}}}],["src/validators/isconfirmtokenvalid.validator.ts:18",{"_index":289,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{}}}],["src/validators/isuserexists.validator.ts",{"_index":307,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/validators/isuserexists.validator.ts:12",{"_index":308,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{}}}],["src/validators/isuserexists.validator.ts:14",{"_index":310,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{}}}],["start",{"_index":658,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":661,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":662,"title":{},"body":{"index.html":{}}}],["started",{"_index":639,"title":{"index.html":{}},"body":{}}],["starter",{"_index":651,"title":{},"body":{"index.html":{}}}],["statements",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["status=new",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stay",{"_index":684,"title":{},"body":{"index.html":{}}}],["store",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["strategy",{"_index":329,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["strategy/local.strategy",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":13,"title":{},"body":{"classes/AddPostDto.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":332,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{}}}],["super.canactivate(context",{"_index":321,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["super.login(request",{"_index":322,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["support",{"_index":676,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":695,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["symbol('auth:redis",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":299,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["test",{"_index":665,"title":{},"body":{"index.html":{}}}],["test4@gmail.com",{"_index":743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":668,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":667,"title":{},"body":{"index.html":{}}}],["tests",{"_index":664,"title":{},"body":{"index.html":{}}}],["text",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["thanks",{"_index":674,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":419,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":420,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":421,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.confirmuser(body",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(body",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":335,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('node_env",{"_index":423,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.configservice.get('origin')}/auth/confirm/${token",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createconfirmationurl(user.id",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postservice.addpost(body",{"_index":371,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findallposts",{"_index":374,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findpostbyid(id",{"_index":377,"title":{},"body":{"controllers/PostController.html":{}}}],["this.prisma.post.create",{"_index":393,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findmany",{"_index":395,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findunique",{"_index":396,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.user.count",{"_index":516,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.create",{"_index":514,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findfirst",{"_index":513,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":515,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["this.redis.del(confirmuserprefix",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redis.setex(confirmuserprefix",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redis.v4.get(confirmuserprefix",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["this.sendconfirmationmail",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createuser(data",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(email",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(payload.id",{"_index":453,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["this.userservice.updateuser(id",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.userexists(email",{"_index":313,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{}}}],["this.utilservice.sendmail",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["through",{"_index":547,"title":{},"body":{"injectables/UtilService.html":{}}}],["throw",{"_index":336,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["title",{"_index":10,"title":{},"body":{"classes/AddPostDto.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["touch",{"_index":685,"title":{},"body":{"index.html":{}}}],["transform",{"_index":478,"title":{},"body":{"classes/SignupDto.html":{}}}],["transformer",{"_index":480,"title":{},"body":{"classes/SignupDto.html":{},"dependencies.html":{}}}],["transformfnparams",{"_index":479,"title":{},"body":{"classes/SignupDto.html":{}}}],["transporter",{"_index":526,"title":{},"body":{"injectables/UtilService.html":{}}}],["transporter.sendmail(options",{"_index":539,"title":{},"body":{"injectables/UtilService.html":{}}}],["true",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["true})@get",{"_index":351,"title":{},"body":{"controllers/PostController.html":{}}}],["twitter",{"_index":691,"title":{},"body":{"index.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types/express",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":650,"title":{},"body":{"index.html":{}}}],["ui",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":327,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('incorrect",{"_index":337,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unit",{"_index":663,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":704,"title":{},"body":{"properties.html":{}}}],["updatedat",{"_index":740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuser",{"_index":497,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(id",{"_index":508,"title":{},"body":{"injectables/UserService.html":{}}}],["url",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"injectables/UtilService.html":{}}}],["usefactory",{"_index":435,"title":{},"body":{"modules/RedisModule.html":{}}}],["useguards",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["useguards(isauthenticatedguard",{"_index":369,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(localauthguard",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('/login')@apibody({type",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["user.firstname",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["user.id",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionSerializer.html":{}}}],["user.lastname",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["user.password",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":492,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/SessionSerializer.html":{}}}],["userexists",{"_index":498,"title":{},"body":{"injectables/UserService.html":{}}}],["userexists(email",{"_index":511,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":387,"title":{},"body":{"injectables/PostService.html":{}}}],["usermodule",{"_index":38,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":333,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userservice",{"_index":194,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/SessionSerializer.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userstub",{"_index":594,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils.service",{"_index":554,"title":{},"body":{"modules/UtilsModule.html":{}}}],["utils/mocks/express/mockrequest.ts",{"_index":577,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockauthservice.ts",{"_index":579,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockconfigservice.ts",{"_index":581,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockpostservice.ts",{"_index":583,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockprismaservice.ts",{"_index":585,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockredisservice.ts",{"_index":587,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockuserservice.ts",{"_index":589,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockutilservice.ts",{"_index":591,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/utils.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/utils.service",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["utilservice",{"_index":195,"title":{"injectables/UtilService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["utilsmodule",{"_index":39,"title":{"modules/UtilsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UtilsModule.html":{},"modules.html":{},"overview.html":{}}}],["uuid",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["v4",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":458,"title":{},"body":{"classes/SignupDto.html":{}}}],["validate",{"_index":285,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":309,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{}}}],["validate(token",{"_index":288,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{}}}],["validateuser",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationoptions",{"_index":293,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":22,"title":{},"body":{"classes/AddPostDto.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"classes/SignupDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":291,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["validatorconstraintinterface",{"_index":292,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["validators/isconfirmtokenvalid.validator",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"classes/ConfirmUserDto.html":{}}}],["validators/isuserexists.validator",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"classes/SignupDto.html":{}}}],["value",{"_index":486,"title":{},"body":{"classes/SignupDto.html":{},"miscellaneous/variables.html":{}}}],["value?.trim",{"_index":487,"title":{},"body":{"classes/SignupDto.html":{}}}],["variable",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":705,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":702,"title":{},"body":{"properties.html":{}}}],["void",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionSerializer.html":{}}}],["watch",{"_index":659,"title":{},"body":{"index.html":{}}}],["website",{"_index":689,"title":{},"body":{"index.html":{}}}],["world",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["yes",{"_index":503,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":679,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddPostDto.html":{"url":"classes/AddPostDto.html","title":"class - AddPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/AddPost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                post\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Post cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/AddPost.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'title cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/AddPost.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport default class AddPostDto {\n  @IsNotEmpty({ message: 'title cannot be empty' })\n  title: string;\n\n  @IsNotEmpty({ message: 'Post cannot be empty' })\n  post: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUtilsModule\n\nUtilsModule\n\nAppModule -->\n\nUtilsModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UtilsModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Inject, MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport AuthModule from './auth/auth.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { PostModule } from './post/post.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { RedisModule } from './redis/redis.module';\nimport { REDIS } from './redis/redis.constants';\nimport { UtilsModule } from './utils/utils.module';\nimport * as session from 'express-session';\nimport * as RedisStore from 'connect-redis';\nimport * as passport from 'passport';\nimport { RedisClientType } from 'redis';\nimport { UserModule } from './user/user.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    RedisModule,\n    AuthModule,\n    PrismaModule,\n    PostModule,\n    UtilsModule,\n    UserModule,\n  ],\n})\nexport class AppModule implements NestModule {\n  constructor(@Inject(REDIS) private readonly redis: RedisClientType) {}\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(\n        session({\n          store: new (RedisStore(session))({\n            client: this.redis as any,\n            logErrors: true,\n          }),\n          name: 'qid',\n          secret: process.env.SESSION_SECRET,\n          resave: false,\n          saveUninitialized: false,\n          cookie: {\n            httpOnly: true,\n            secure: process.env.NODE_ENV == 'production',\n            maxAge: 2160000000,\n          },\n        }),\n        passport.initialize(),\n        passport.session(),\n      )\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                confirmUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmUser\n                        \n                    \n                \n            \n            \n                \nconfirmUser(body: ConfirmUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/confirm')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                ConfirmUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/login')@ApiBody({type: LoginDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(body: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport AuthService from './auth.service';\nimport { SignupDto } from './dto';\nimport ConfirmUserDto from './dto/ConfirmUser.dto';\nimport LocalAuthGuard from './guard/LocalAuth.guard';\nimport { Request } from 'express';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport LoginDto from './dto/Login.dto';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport default class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('/signup')\n  signup(@Body() body: SignupDto) {\n    return this.authService.signup(body);\n  }\n\n  @Post('/confirm')\n  confirmUser(@Body() body: ConfirmUserDto) {\n    return this.authService.confirmUser(body);\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @Post('/login')\n  @ApiBody({ type: LoginDto })\n  async login(@Req() req: Request) {\n    return req.user;\n  }\n\n  @Post('/logout')\n  async logout(@Req() req: Request) {\n    const logoutPromise = new Promise((resolve, reject) => {\n      req.logout((err) => {\n        if (err) {\n          console.error(err);\n          return reject({ success: false });\n        }\n        return resolve({ success: true });\n      });\n    });\n    return await logoutPromise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nIsConfirmTokenValidConstraint\n\nIsConfirmTokenValidConstraint\n\nAuthModule -->\n\nIsConfirmTokenValidConstraint->AuthModule\n\n\n\n\n\nIsUserExistsConstraint\n\nIsUserExistsConstraint\n\nAuthModule -->\n\nIsUserExistsConstraint->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionSerializer\n\nSessionSerializer\n\nAuthModule -->\n\nSessionSerializer->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            IsConfirmTokenValidConstraint\n                        \n                        \n                            IsUserExistsConstraint\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            SessionSerializer\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { IsConfirmTokenValidConstraint } from '../validators/IsConfirmTokenValid.validator';\nimport { UserModule } from '../user/user.module';\nimport { IsUserExistsConstraint } from '../validators/isUserExists.validator';\nimport AuthController from './auth.controller';\nimport AuthService from './auth.service';\nimport SessionSerializer from './session.serializer';\nimport LocalStrategy from './strategy/local.strategy';\n\n@Module({\n  imports: [UserModule, PassportModule.register({ session: true })],\n  providers: [\n    AuthService,\n    IsUserExistsConstraint,\n    IsConfirmTokenValidConstraint,\n    LocalStrategy,\n    SessionSerializer,\n  ],\n  controllers: [AuthController],\n})\nexport default class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmUser\n                            \n                            \n                                    Async\n                                createConfirmationUrl\n                            \n                            \n                                    Async\n                                sendConfirmationMail\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, utilService: UtilService, configService: ConfigService, redis: RedisClientType)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilService\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    RedisClientType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmUser(undefined: ConfirmUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ConfirmUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConfirmationUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConfirmationUrl(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendConfirmationMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendConfirmationMail(to: string, url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    to\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(data: Prisma.UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { Prisma } from '@prisma/client';\nimport UtilService from '../utils/utils.service';\nimport { v4 } from 'uuid';\nimport { confirmUserPrefix } from './auth.constants';\nimport { ConfigService } from '@nestjs/config';\nimport { REDIS } from '../redis/redis.constants';\nimport { RedisClientType } from '@redis/client';\nimport ConfirmUserDto from './dto/ConfirmUser.dto';\nimport { UserService } from '../user/user.service';\n\n@Injectable()\nexport default class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly utilService: UtilService,\n    private readonly configService: ConfigService,\n    @Inject(REDIS) private readonly redis: RedisClientType,\n  ) {}\n  async signup(data: Prisma.UserCreateInput) {\n    data.password = await bcrypt.hash(data.password, 10);\n    const user = await this.userService.createUser(data);\n    await this.sendConfirmationMail(\n      data.email,\n      await this.createConfirmationUrl(user.id),\n    );\n    return { ...user };\n  }\n\n  async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (!user) {\n      return null;\n    }\n\n    const isValid = await bcrypt.compare(password, user.password);\n\n    if (!isValid) {\n      return null;\n    }\n\n    return { id: user.id, firstname: user.firstname, lastname: user.lastname };\n  }\n\n  async createConfirmationUrl(id: string): Promise {\n    const token = v4();\n    await this.redis.setEx(confirmUserPrefix + token, 3600, id);\n    return `${this.configService.get('ORIGIN')}/auth/confirm/${token}`;\n  }\n\n  async sendConfirmationMail(to: string, url: string) {\n    return this.utilService.sendMail({\n      from: '\"Fred Foo 👻\" ', // sender address\n      to, // list of receivers\n      subject: 'Hello ✔', // Subject line\n      text: 'Hello world?', // plain text body\n      html: `${url}`, // html body\n    });\n  }\n  async confirmUser({ token }: ConfirmUserDto) {\n    const id = await this.redis.v4.get(confirmUserPrefix + token);\n    await this.userService.updateUser(id, { confirmed: true });\n    await this.redis.del(confirmUserPrefix + token);\n    return { success: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmUserDto.html":{"url":"classes/ConfirmUserDto.html","title":"class - ConfirmUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/ConfirmUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsConfirmTokenValid({message: 'Token is invalid or expired!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/ConfirmUser.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsConfirmTokenValid } from '../../validators/IsConfirmTokenValid.validator';\n\nexport default class ConfirmUserDto {\n  @IsConfirmTokenValid({ message: 'Token is invalid or expired!' })\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsAuthenticatedGuard.html":{"url":"guards/IsAuthenticatedGuard.html","title":"guard - IsAuthenticatedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsAuthenticatedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/IsAuthenticated.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/IsAuthenticated.guard.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable({})\nexport default class IsAuthenticatedGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n\n    return request.isAuthenticated();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsConfirmTokenValidConstraint.html":{"url":"injectables/IsConfirmTokenValidConstraint.html","title":"injectable - IsConfirmTokenValidConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsConfirmTokenValidConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validators/IsConfirmTokenValid.validator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: RedisClientType)\n                    \n                \n                        \n                            \n                                Defined in src/validators/IsConfirmTokenValid.validator.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    RedisClientType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/validators/IsConfirmTokenValid.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { RedisClientType } from '@redis/client';\nimport {\n  registerDecorator,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationOptions,\n} from 'class-validator';\nimport { confirmUserPrefix } from '../auth/auth.constants';\nimport { REDIS } from '../redis/redis.constants';\n\n@ValidatorConstraint({ name: 'IsConfirmTokenValid', async: true })\n@Injectable()\nexport class IsConfirmTokenValidConstraint\n  implements ValidatorConstraintInterface\n{\n  constructor(@Inject(REDIS) private readonly redis: RedisClientType) {}\n  async validate(token: string): Promise {\n    return !!(await this.redis.v4.get(confirmUserPrefix + token));\n  }\n}\n\nexport function IsConfirmTokenValid(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsConfirmTokenValidConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsConfirmedGuard.html":{"url":"guards/IsConfirmedGuard.html","title":"guard - IsConfirmedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsConfirmedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/IsConfirmed.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/IsConfirmed.guard.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable({})\nexport default class IsConfirmedGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    return request.user.confirmed;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsUserExistsConstraint.html":{"url":"injectables/IsUserExistsConstraint.html","title":"injectable - IsUserExistsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsUserExistsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validators/IsUserExists.validator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/validators/IsUserExists.validator.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/validators/IsUserExists.validator.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  registerDecorator,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationOptions,\n} from 'class-validator';\nimport { UserService } from '../user/user.service';\n\n@ValidatorConstraint({ name: 'IsEmailExists', async: true })\n@Injectable()\nexport class IsUserExistsConstraint implements ValidatorConstraintInterface {\n  constructor(protected readonly userService: UserService) {}\n  async validate(email: string): Promise {\n    return !(await this.userService.userExists(email));\n  }\n}\n\nexport function IsUserExists(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsUserExistsConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/LocalAuth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/LocalAuth.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable({})\nexport default class LocalAuthGuard extends AuthGuard('local') {\n  async canActivate(context: ExecutionContext) {\n    const result = (await super.canActivate(context)) as boolean;\n    const request = context.switchToHttp().getRequest();\n    await super.logIn(request);\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/local.strategy.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport AuthService from '../auth.service';\n\n@Injectable({})\nexport default class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({ usernameField: 'email' }); // config\n  }\n  async validate(email: string, password: string) {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('incorrect email or password');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/Login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Login.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Login.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class LoginDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addPost\n                            \n                            \n                                findAllPosts\n                            \n                            \n                                findPostById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addPost\n                        \n                    \n                \n            \n            \n                \naddPost(body: AddPostDto, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AddPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllPosts\n                        \n                    \n                \n            \n            \n                \nfindAllPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The list of posts', isArray: true})@Get()\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:33\n                \n            \n\n\n            \n                \n                    A method that fetches all posts\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findPostById\n                        \n                    \n                \n            \n            \n                \nfindPostById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'find a post by id'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:41\n                \n            \n\n\n            \n                \n                    A method that fetches a post by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport IsAuthenticatedGuard from '../auth/guard/IsAuthenticated.guard';\nimport AddPostDto from './dto/AddPost.dto';\nimport PostService from './post.service';\nimport { Request } from 'express';\nimport IsConfirmedGuard from '../auth/guard/IsConfirmed.guard';\nimport { ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { Post as PostType } from '@prisma/client';\n@ApiTags('Post')\n@Controller('post')\n@UseGuards(IsAuthenticatedGuard, IsConfirmedGuard)\nexport default class PostController {\n  constructor(private readonly postService: PostService) {}\n\n  @Post()\n  addPost(@Body() body: AddPostDto, @Req() req: Request) {\n    return this.postService.addPost(body, req.user.id);\n  }\n\n  /**\n   * A method that fetches all posts\n   */\n  @ApiOkResponse({ description: 'The list of posts', isArray: true })\n  @Get()\n  findAllPosts() {\n    return this.postService.findAllPosts();\n  }\n  /**\n   * A method that fetches a post by id\n   */\n  @ApiOkResponse({ description: 'find a post by id' })\n  @Get(':id')\n  findPostById(@Param('id') id: string): Promise {\n    return this.postService.findPostById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPostService\n\nPostService\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport PostController from './post.controller';\nimport PostService from './post.service';\n\n@Module({\n  providers: [PostService],\n  controllers: [PostController],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPost\n                            \n                            \n                                    Async\n                                findAllPosts\n                            \n                            \n                                    Async\n                                findPostById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPost(data: AddPostDto, userId)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AddPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPosts()\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPostById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport AddPostDto from './dto/AddPost.dto';\n\n@Injectable()\nexport default class PostService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async addPost(data: AddPostDto, userId) {\n    const post = { ...data, authorId: userId };\n    const { id } = await this.prisma.post.create({\n      data: post,\n      select: { id: true },\n    });\n    return {\n      id,\n      success: true,\n    };\n  }\n\n  async findAllPosts() {\n    return await this.prisma.post.findMany();\n  }\n\n  async findPostById(id: string) {\n    return await this.prisma.post.findUnique({ where: { id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cleanDatabase\n                            \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        cleanDatabase\n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanDatabase()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  OnModuleInit,\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable({})\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor(private readonly configService: ConfigService) {\n    super();\n  }\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n\n  async cleanDatabase() {\n    if (this.configService.get('NODE_ENV') == 'production') return;\n    const prisma = new PrismaClient();\n    const propertyNames = Object.getOwnPropertyNames(prisma);\n    const modelNames = propertyNames.filter(\n      (propertyName) => !propertyName.startsWith('_'),\n    );\n\n    return Promise.all(modelNames.map((model) => prisma[model].deleteMany()));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { createClient } from 'redis';\nimport { REDIS } from './redis.constants';\n\n@Global()\n@Module({\n  providers: [\n    {\n      provide: REDIS,\n      useFactory: async () => {\n        const client = createClient({\n          legacyMode: true,\n          url: process.env.REDIS_URL,\n        });\n        await client.connect();\n\n        return client;\n      },\n    },\n  ],\n  exports: [REDIS],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionSerializer.html":{"url":"injectables/SessionSerializer.html","title":"injectable - SessionSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/session.serializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PassportSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deserializeUser\n                            \n                            \n                                serializeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/session.serializer.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deserializeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deserializeUser(payload: any, done: (err: Error,user: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/session.serializer.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serializeUser\n                        \n                    \n                \n            \n            \n                \nserializeUser(user: any, done: (err: Error,user: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/session.serializer.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportSerializer } from '@nestjs/passport';\nimport { UserService } from '../user/user.service';\n\n@Injectable()\nexport default class SessionSerializer extends PassportSerializer {\n  constructor(private readonly userService: UserService) {\n    super();\n  }\n  serializeUser(user: any, done: (err: Error, user: any) => void) {\n    done(null, { id: user.id });\n  }\n\n  async deserializeUser(payload: any, done: (err: Error, user: any) => void) {\n    const user = await this.userService.findById(payload.id, {\n      id: true,\n      confirmed: true,\n      email: true,\n      firstname: true,\n      lastname: true,\n    });\n    done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/Signup.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {message: 'please enter a valid email'})@IsUserExists({message: 'Account already exists, please login'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Signup.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Please enter your first name'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Signup.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Please enter your last name.'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Signup.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(6, {message: 'password should be atleast 6 characters'})@NotContains(' ', {message: 'password should contain only letter,symbols and numbers'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Signup.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform, TransformFnParams } from 'class-transformer';\nimport { IsEmail, IsNotEmpty, MinLength, NotContains } from 'class-validator';\nimport { IsUserExists } from '../../validators/isUserExists.validator';\n\nexport class SignupDto {\n  @IsEmail({}, { message: 'please enter a valid email' })\n  @IsUserExists({ message: 'Account already exists, please login' })\n  email: string;\n\n  @MinLength(6, { message: 'password should be atleast 6 characters' })\n  @NotContains(' ', {\n    message: 'password should contain only letter,symbols and numbers',\n  })\n  @Transform(({ value }: TransformFnParams) => value?.trim())\n  password: string;\n\n  @IsNotEmpty({ message: 'Please enter your first name' })\n  @Transform(({ value }: TransformFnParams) => value?.trim())\n  firstname: string;\n\n  @IsNotEmpty({ message: 'Please enter your last name.' })\n  @Transform(({ value }: TransformFnParams) => value?.trim())\n  lastname: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\n\n@Module({\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                userExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Prisma.UserCreateInput, select?: Prisma.UserSelect)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select\n                                    \n                                            Prisma.UserSelect\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string, select?: Prisma.UserSelect)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select\n                                    \n                                            Prisma.UserSelect\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string, select?: Prisma.UserSelect)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select\n                                    \n                                            Prisma.UserSelect\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: string, data: Prisma.UserUpdateInput, select?: Prisma.UserSelect)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            Prisma.UserUpdateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select\n                                    \n                                            Prisma.UserSelect\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    userExists(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, User } from '@prisma/client';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class UserService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async findByEmail(\n    email: string,\n    select?: Prisma.UserSelect,\n  ): Promise> {\n    return await this.prisma.user.findFirst({\n      where: { email },\n      ...(select && { select }),\n    });\n  }\n\n  async findById(\n    id: string,\n    select?: Prisma.UserSelect,\n  ): Promise> {\n    return await this.prisma.user.findFirst({\n      where: { id },\n      ...(select && { select }),\n    });\n  }\n\n  async createUser(\n    user: Prisma.UserCreateInput,\n    select?: Prisma.UserSelect,\n  ): Promise> {\n    return await this.prisma.user.create({\n      data: user,\n      ...(select && { select }),\n    });\n  }\n\n  async updateUser(\n    id: string,\n    data: Prisma.UserUpdateInput,\n    select?: Prisma.UserSelect,\n  ): Promise> {\n    return await this.prisma.user.update({\n      data,\n      where: { id },\n      ...(select && { select }),\n    });\n  }\n\n  async userExists(email: string): Promise {\n    return !!(await this.prisma.user.count({ where: { email } }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UtilService.html":{"url":"injectables/UtilService.html","title":"injectable - UtilService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/utils.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/utils.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as nodemailer from 'nodemailer';\nimport Mail from 'nodemailer/lib/mailer';\n\n@Injectable()\nexport default class UtilService {\n  async sendMail(options: Mail.Options) {\n    const account = await nodemailer.createTestAccount();\n\n    const transporter = nodemailer.createTransport({\n      host: 'smtp.ethereal.email',\n      port: 587,\n      secure: false, // true for 465, false for other ports\n      auth: {\n        user: account.user, // generated ethereal user\n        pass: account.pass, // generated ethereal password\n      },\n    });\n\n    const info = await transporter.sendMail(options);\n\n    console.log('Message sent: %s', info.messageId);\n    // Preview only available when sending through an Ethereal account\n    console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\n    return info;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UtilsModule.html":{"url":"modules/UtilsModule.html","title":"module - UtilsModule","body":"\n                   \n\n\n\n\n    Modules\n    UtilsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UtilsModule\n\n\n\ncluster_UtilsModule_exports\n\n\n\ncluster_UtilsModule_providers\n\n\n\n\nUtilService \n\nUtilService \n\n\n\nUtilsModule\n\nUtilsModule\n\nUtilService  -->\n\nUtilsModule->UtilService \n\n\n\n\n\nUtilService\n\nUtilService\n\nUtilsModule -->\n\nUtilService->UtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/utils/utils.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UtilService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport UtilService from './utils.service';\n\n@Global()\n@Module({\n  providers: [UtilService],\n  exports: [UtilService],\n})\nexport class UtilsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            confirmUserPrefix\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/dto/ConfirmUser.dto.ts\n            \n            class\n            ConfirmUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/Login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/Signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/guard/IsAuthenticated.guard.ts\n            \n            guard\n            IsAuthenticatedGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guard/IsConfirmed.guard.ts\n            \n            guard\n            IsConfirmedGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guard/LocalAuth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/session.serializer.ts\n            \n            injectable\n            SessionSerializer\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dto/AddPost.dto.ts\n            \n            class\n            AddPostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/post/test/stubs/post.stub.ts\n            \n            variable\n            postStub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/redis/redis.constants.ts\n            \n            variable\n            REDIS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/express/mockRequest.ts\n            \n            variable\n            mockRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockAuthService.ts\n            \n            variable\n            mockAuthService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockConfigService.ts\n            \n            variable\n            mockConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockPostService.ts\n            \n            variable\n            mockPostService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockPrismaService.ts\n            \n            variable\n            mockPrismaService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockRedisService.ts\n            \n            variable\n            mockRedisService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockUserService.ts\n            \n            variable\n            mockUserService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockUtilService.ts\n            \n            variable\n            mockUtilService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/test/stubs/userStub.ts\n            \n            variable\n            userStub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/utils.service.ts\n            \n            injectable\n            UtilService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/validators/IsConfirmTokenValid.validator.ts\n            \n            injectable\n            IsConfirmTokenValidConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/validators/IsConfirmTokenValid.validator.ts\n            \n            function\n            IsConfirmTokenValid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/validators/IsUserExists.validator.ts\n            \n            injectable\n            IsUserExistsConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/validators/IsUserExists.validator.ts\n            \n            function\n            IsUserExists\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.3\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.3\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.3\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @prisma/client : ^4.0.0\n        \n            @types/express-session : ^1.17.5\n        \n            @types/passport-local : ^1.0.34\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            connect-redis : ^6.1.3\n        \n            cookie-parser : ^1.4.6\n        \n            express-session : ^1.17.3\n        \n            nodemailer : ^6.7.7\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            redis : ^4.2.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.5.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsConfirmTokenValid   (src/.../IsConfirmTokenValid.validator.ts)\n                        \n                        \n                            IsUserExists   (src/.../IsUserExists.validator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/validators/IsConfirmTokenValid.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsConfirmTokenValid\n                        \n                    \n                \n            \n            \n                \nIsConfirmTokenValid(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/validators/IsUserExists.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUserExists\n                        \n                    \n                \n            \n            \n                \nIsUserExists(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UtilsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UtilsModule\n\n\n\ncluster_UtilsModule_exports\n\n\n\ncluster_UtilsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUtilsModule\n\nUtilsModule\n\nAppModule -->\n\nUtilsModule->AppModule\n\n\n\n\n\nUtilService \n\nUtilService \n\nUtilService  -->\n\nUtilsModule->UtilService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nIsConfirmTokenValidConstraint\n\nIsConfirmTokenValidConstraint\n\nAuthModule -->\n\nIsConfirmTokenValidConstraint->AuthModule\n\n\n\n\n\nIsUserExistsConstraint\n\nIsUserExistsConstraint\n\nAuthModule -->\n\nIsUserExistsConstraint->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionSerializer\n\nSessionSerializer\n\nAuthModule -->\n\nSessionSerializer->AuthModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nUtilsModule -->\n\nUtilService->UtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            confirmUserPrefix   (src/.../auth.constants.ts)\n                        \n                        \n                            mockAuthService   (src/.../mockAuthService.ts)\n                        \n                        \n                            mockConfigService   (src/.../mockConfigService.ts)\n                        \n                        \n                            mockPostService   (src/.../mockPostService.ts)\n                        \n                        \n                            mockPrismaService   (src/.../mockPrismaService.ts)\n                        \n                        \n                            mockRedisService   (src/.../mockRedisService.ts)\n                        \n                        \n                            mockRequest   (src/.../mockRequest.ts)\n                        \n                        \n                            mockUserService   (src/.../mockUserService.ts)\n                        \n                        \n                            mockUtilService   (src/.../mockUtilService.ts)\n                        \n                        \n                            postStub   (src/.../post.stub.ts)\n                        \n                        \n                            REDIS   (src/.../redis.constants.ts)\n                        \n                        \n                            userStub   (src/.../userStub.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        confirmUserPrefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user-confirmation:'\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockAuthService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockAuthService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  signup: jest.fn((dto: SignupDto) => {\n    return {\n      id: faker.datatype.uuid(),\n      firstname: dto.firstname,\n      lastname: dto.lastname,\n    };\n  }),\n  login: jest.fn(() =>\n    Promise.resolve({\n      id: faker.datatype.uuid(),\n      firstname: faker.name.firstName(),\n      lastname: faker.name.lastName(),\n    }),\n  ),\n  confirmUser: jest.fn(() => {\n    return {\n      success: true,\n    };\n  }),\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockConfigService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  get: jest.fn((key) => key),\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockPostService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockPostService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  addPost: jest.fn(() => {\n    return {\n      id: faker.datatype.uuid(),\n      success: true,\n    };\n  }),\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockPrismaService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockPrismaService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  user: {\n    create: jest.fn(({ data }) => {\n      return {\n        id: faker.datatype.uuid(),\n        firstname: data.firstname,\n        lastname: data.lastname,\n      };\n    }),\n    findFirst: jest.fn(async () => {\n      return {\n        id: faker.datatype.uuid(),\n        firstname: faker.name.firstName(),\n        lastname: faker.name.lastName(),\n        password: await bcrypt.hash('123456', 10),\n      };\n    }),\n  },\n  post: {\n    create: jest.fn(() =>\n      Promise.resolve({\n        id: faker.datatype.uuid(),\n      }),\n    ),\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockRedisService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockRedisService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  setEx: jest.fn(() => Promise.resolve()),\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/express/mockRequest.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  logout: jest.fn((callback) => {\n    callback();\n  }),\n  user: {\n    id: faker.datatype.uuid(),\n    firstname: faker.name.firstName(),\n    lastname: faker.name.lastName(),\n  },\n} as unknown as Request\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockUserService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockUserService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  createUser: (user: Prisma.UserCreateInput) => {\n    return {\n      id: faker.datatype.uuid(),\n      firstname: user.firstname,\n      lastname: user.lastname,\n    };\n  },\n  findByEmail: async (email: string): Promise => {\n    return {\n      id: faker.datatype.uuid(),\n      email,\n      firstname: faker.name.firstName(),\n      lastname: faker.name.lastName(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      password: await bcrypt.hash('test', 10),\n      confirmed: false,\n    };\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockUtilService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockUtilService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UtilService\n\n                    \n                \n                \n                    \n                        Default value : {\n  sendMail: jest.fn(() =>\n    Promise.resolve({\n      accepted: ['test4@gmail.com'],\n      rejected: [],\n      pending: [],\n      envelopeTime: 482,\n      messageTime: 394,\n      messageSize: 775,\n      response:\n        '250 Accepted [STATUS=new MSGID=Yslz4MnYHerE3KlaYsl0QZbmr1scRIdWAAAAAmRsW1.gjzeWFDy-bC0uIx8]',\n      envelope: {\n        from: 'foo@example.com',\n        to: ['test4@gmail.com'],\n      },\n      messageId: '',\n    }),\n  ),\n}\n                    \n                \n\n\n        \n    \n\n    src/post/test/stubs/post.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        postStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (authorId): Prisma.PostCreateInput => {\n  return {\n    title: faker.lorem.sentence(),\n    post: faker.lorem.sentences(10),\n    author: authorId,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/redis/redis.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REDIS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('AUTH:REDIS')\n                    \n                \n\n\n        \n    \n\n    src/user/test/stubs/userStub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): Prisma.UserCreateInput => {\n  return {\n    id: faker.datatype.uuid(),\n    email: faker.internet.email(),\n    firstname: faker.name.firstName(),\n    lastname: faker.name.lastName(),\n    password: faker.internet.password(),\n  };\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
