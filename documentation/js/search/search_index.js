var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddPostDto.html",[0,0.079,1,1.876]],["body/classes/AddPostDto.html",[0,0.121,1,2.894,2,2.265,3,0.358,4,0.31,5,0.31,6,3.245,7,0.57,8,2.629,9,3.473,10,5.95,11,0.656,12,0.031,13,1.846,14,2.894,15,4.147,16,5.758,17,0.883,18,3.88,19,3.88,20,0.407,21,4.57,22,2.265,23,0.358,24,0.977,25,3.612,26,0.024,27,0.024]],["title/modules/AppModule.html",[28,0.877,29,2.082]],["body/modules/AppModule.html",[0,0.059,3,0.223,4,0.193,5,0.193,11,0.32,12,0.031,17,0.431,20,0.632,23,0.223,26,0.017,27,0.017,28,0.977,29,3.991,30,0.911,31,1.462,32,2.023,33,2.023,34,3.068,35,3.068,36,3.068,37,3.068,38,2.786,39,3.068,40,1.733,41,1.172,42,1.172,43,2.419,44,2.992,45,0.609,46,2.419,47,3.578,48,4.704,49,2.419,50,0.56,51,0.761,52,0.56,53,3.578,54,0.609,55,2.023,56,1.762,57,3.578,58,0.32,59,2.419,60,2.419,61,2.419,62,2.419,63,1.568,64,2.419,65,2.278,66,1.762,67,2.419,68,3.102,69,1.568,70,2.419,71,2.023,72,2.606,73,2.606,74,2.023,75,2.419,76,2.419,77,1.365,78,1.283,79,2.023,80,1.762,81,0.911,82,2.419,83,2.419,84,1.283,85,2.419,86,2.023,87,2.419,88,2.419,89,2.419,90,2.419,91,2.419,92,2.419,93,2.318,94,2.419,95,2.023,96,2.419,97,2.023,98,2.419,99,1.762,100,2.419,101,2.419,102,2.419,103,2.419,104,2.419]],["title/controllers/AuthController.html",[105,1.876,106,2.082]],["body/controllers/AuthController.html",[0,0.059,3,0.224,4,0.194,5,0.194,7,0.356,9,1.416,11,0.665,12,0.031,14,2.749,17,0.839,20,0.587,23,0.224,24,0.61,26,0.017,27,0.017,45,0.902,50,1.091,51,1.002,52,1.091,54,1.186,58,0.321,69,1.572,77,0.778,84,1.286,93,1.572,105,1.416,106,2.323,107,1.416,108,2.028,109,2.028,110,2.028,111,2.611,112,1.557,113,2.611,114,2.998,115,2.611,116,2.425,117,2.749,118,3.585,119,2.425,120,3.661,121,2.425,122,2.885,123,2.425,124,2.763,125,2.425,126,4.203,127,1.592,128,2.425,129,3.585,130,2.425,131,2.425,132,2.749,133,3.585,134,2.425,135,2.028,136,2.065,137,1.767,138,2.425,139,2.028,140,1.572,141,2.425,142,3.585,143,2.028,144,1.767,145,2.425,146,2.425,147,2.425,148,1.175,149,2.425,150,1.324,151,2.425,152,2.425,153,2.425,154,2.425,155,2.425,156,2.425,157,2.425,158,2.425,159,0.842,160,3.585,161,2.425,162,3.585,163,2.425,164,2.028,165,2.425,166,2.323,167,2.425,168,0.718]],["title/modules/AuthModule.html",[28,0.877,34,1.876]],["body/modules/AuthModule.html",[0,0.075,3,0.284,4,0.246,5,0.246,12,0.031,20,0.634,23,0.284,24,0.774,26,0.02,27,0.02,28,1.16,30,1.158,31,1.736,34,3.721,38,3.02,40,2.058,41,1.49,42,1.49,44,3.554,58,0.407,68,2.241,74,2.573,77,0.987,106,3.154,107,2.48,136,2.759,137,2.241,169,2.573,170,2.573,171,3.077,172,3.325,173,3.325,174,3.325,175,3.325,176,3.077,177,2.253,178,3.077,179,1.796,180,2.573,181,2.573,182,3.077,183,3.077,184,3.077,185,3.077]],["title/injectables/AuthService.html",[136,1.556,186,0.38]],["body/injectables/AuthService.html",[0,0.043,3,0.162,4,0.14,5,0.14,7,0.258,11,0.612,12,0.031,13,1.844,17,0.824,20,0.57,23,0.162,24,0.442,26,0.013,27,0.013,45,0.704,50,1.071,51,0.984,52,1.071,54,1.093,56,1.28,58,0.232,63,1.139,65,1.926,66,1.28,73,2.897,77,0.897,80,2.897,81,1.497,111,2.54,112,1.702,115,2.039,117,2.321,120,2.039,127,1.549,136,1.355,139,1.47,150,1.221,159,1.508,166,1.139,168,1.574,186,0.331,187,0.61,188,1.47,189,2.799,190,2.799,191,2.799,192,1.243,193,1.28,194,2.055,195,2.35,196,4.057,197,1.757,198,1.757,199,1.757,200,2.799,201,1.757,202,2.108,203,2.108,204,2.799,205,2.897,206,1.757,207,2.799,208,2.54,209,1.757,210,1.139,211,2.799,212,1.849,213,1.757,214,0.781,215,2.34,216,1.139,217,1.026,218,1.757,219,2.799,220,1.47,221,1.139,222,1.757,223,1.47,224,1.28,225,1.757,226,1.757,227,1.757,228,1.28,229,2.108,230,1.757,231,1.757,232,1.757,233,1.757,234,1.757,235,2.799,236,2.799,237,1.757,238,1.757,239,1.47,240,1.139,241,1.47,242,1.139,243,1.47,244,3.163,245,1.757,246,1.757,247,1.757,248,1.757,249,1.757,250,1.757,251,1.757,252,1.757,253,1.47,254,1.757,255,2.799,256,2.799,257,1.757,258,2.799,259,1.757,260,1.757,261,2.799,262,1.47,263,1.757,264,1.28,265,1.757]],["title/classes/ConfirmUserDto.html",[0,0.079,117,1.876]],["body/classes/ConfirmUserDto.html",[0,0.102,2,2.445,3,0.386,4,0.334,5,0.334,7,0.615,8,2.758,11,0.554,12,0.03,13,1.668,14,2.445,17,0.746,20,0.44,23,0.386,24,1.054,25,3.051,26,0.025,27,0.025,117,3.037,180,3.503,244,4.435,266,3.503,267,4.188,268,5.203,269,5.203,270,4.188,271,3.371]],["title/guards/IsAuthenticatedGuard.html",[272,2.341,273,2.082]],["body/guards/IsAuthenticatedGuard.html",[0,0.098,3,0.368,4,0.319,5,0.319,7,0.587,11,0.528,12,0.031,17,0.712,20,0.419,23,0.368,24,1.005,26,0.024,27,0.024,45,1.271,50,0.925,51,0.85,52,0.925,54,1.005,58,0.528,78,2.118,122,2.118,150,1.005,159,1.387,186,0.598,273,3.273,274,2.91,275,3.341,276,4.24,277,3.679,278,4.24,279,3.995,280,2.91,281,3.679,282,2.91,283,3.995]],["title/injectables/IsConfirmTokenValidConstraint.html",[172,1.876,186,0.38]],["body/injectables/IsConfirmTokenValidConstraint.html",[0,0.104,3,0.282,4,0.244,5,0.244,7,0.449,11,0.56,12,0.031,13,1.679,17,0.754,20,0.577,22,2.469,23,0.39,26,0.02,27,0.02,45,1.065,50,0.98,51,1.032,52,0.98,54,0.769,56,2.227,58,0.404,65,2.349,66,2.227,73,3.814,77,0.98,78,1.621,79,2.557,80,2.227,81,1.151,112,1.549,150,1.065,168,0.905,172,2.832,186,0.501,187,1.062,192,1.358,203,2.243,221,1.981,223,2.557,244,3.082,262,2.557,271,1.981,284,2.227,285,3.082,286,3.057,287,3.057,288,4.23,289,3.057,290,3.538,291,3.538,292,3.538,293,3.534,294,3.057,295,2.741,296,2.557,297,2.227,298,3.534,299,2.557,300,2.557,301,2.227,302,2.557]],["title/guards/IsConfirmedGuard.html",[272,2.341,303,2.082]],["body/guards/IsConfirmedGuard.html",[0,0.098,3,0.368,4,0.319,5,0.319,7,0.587,11,0.528,12,0.031,17,0.712,20,0.419,23,0.368,24,1.005,26,0.024,27,0.024,45,1.271,50,0.925,51,0.85,52,0.925,54,1.005,58,0.528,78,2.118,122,2.118,150,1.005,159,1.387,186,0.598,274,2.91,276,4.24,277,3.679,278,4.24,280,2.91,281,3.679,282,2.91,303,3.273,304,3.341,305,3.995,306,3.995]],["title/injectables/IsUserExistsConstraint.html",[173,1.876,186,0.38]],["body/injectables/IsUserExistsConstraint.html",[0,0.107,3,0.295,4,0.256,5,0.256,7,0.47,11,0.578,12,0.031,13,1.712,17,0.778,20,0.522,22,2.549,23,0.402,26,0.021,27,0.021,45,1.099,50,1.012,51,1.058,52,1.012,54,0.806,58,0.423,77,1.026,78,1.697,81,1.205,112,1.58,150,1.099,168,0.947,173,2.901,186,0.517,187,1.112,192,1.422,193,2.332,194,2.561,203,2.315,214,1.422,224,2.332,285,3.181,290,3.652,291,3.652,292,3.652,293,3.62,295,2.829,297,2.332,298,3.62,299,2.677,300,2.677,301,2.332,302,2.677,307,2.332,308,3.201,309,3.652,310,3.201,311,3.201,312,3.201,313,3.201,314,2.677]],["title/injectables/LocalAuthGuard.html",[140,2.082,186,0.38]],["body/injectables/LocalAuthGuard.html",[0,0.092,3,0.348,4,0.301,5,0.301,7,0.554,11,0.499,12,0.031,17,0.672,20,0.511,23,0.348,24,0.95,26,0.023,27,0.023,45,1.226,50,0.874,51,0.803,52,0.874,54,0.95,58,0.499,112,1.596,122,2,127,1.676,140,3.155,150,0.95,159,1.691,168,1.441,179,2.202,186,0.576,187,1.31,276,3.548,277,3.548,278,4.151,280,2.748,281,2.748,282,2.748,315,3.155,316,3.773,317,3.773,318,2.445,319,3.773,320,4.87,321,3.773,322,3.773]],["title/injectables/LocalStrategy.html",[174,1.876,186,0.38]],["body/injectables/LocalStrategy.html",[0,0.079,3,0.299,4,0.259,5,0.259,7,0.477,11,0.583,12,0.031,13,1.856,17,0.785,20,0.564,23,0.299,24,0.817,26,0.021,27,0.021,45,1.109,50,1.021,51,0.938,52,1.021,54,0.817,58,0.429,72,2.364,81,1.222,84,1.72,112,1.481,127,1.441,136,2.804,137,2.364,148,1.571,150,0.817,159,1.127,168,0.96,174,2.572,179,1.894,186,0.522,187,1.127,192,1.441,212,2.976,214,2.223,229,2.653,285,3.21,309,3.686,318,2.103,323,2.714,324,3.245,325,3.245,326,3.245,327,3.245,328,3.245,329,3.245,330,2.714,331,3.245,332,2.364,333,3.245,334,3.245,335,3.245,336,3.245,337,3.245]],["title/classes/LoginDto.html",[0,0.079,124,2.082]],["body/classes/LoginDto.html",[0,0.106,2,2.534,3,0.4,4,0.347,5,0.347,7,0.637,8,2.82,11,0.704,12,0.03,13,1.922,17,0.948,23,0.4,24,1.093,26,0.025,27,0.025,124,3.447,212,3.049,214,2.555,338,3.631,339,4.341,340,4.341]],["title/controllers/PostController.html",[105,1.876,341,2.082]],["body/controllers/PostController.html",[0,0.065,1,2.866,3,0.244,4,0.211,5,0.211,7,0.389,9,3.405,11,0.506,12,0.031,13,1.438,14,2.618,17,0.799,20,0.601,23,0.244,24,0.667,26,0.018,27,0.018,45,0.962,50,0.885,51,0.813,52,0.885,54,1.129,58,0.35,69,1.716,77,0.849,81,0.997,105,1.546,107,1.546,109,2.215,120,3.267,122,2.603,126,4.355,135,2.215,143,2.215,144,1.929,148,1.283,150,1.129,202,2.761,203,2.026,217,1.546,253,3.197,273,1.716,303,2.477,341,2.477,342,2.215,343,2.785,344,4.107,345,3.197,346,2.648,347,2.648,348,3.822,349,3.822,350,3.822,351,2.648,352,2.648,353,2.215,354,3.822,355,2.648,356,2.648,357,3.822,358,3.822,359,2.648,360,2.648,361,2.215,362,2.378,363,2.215,364,2.648,365,4.485,366,2.648,367,2.648,368,2.648,369,2.648,370,2.648,371,2.648,372,2.648,373,2.785,374,2.648,375,2.648,376,2.648,377,2.648]],["title/modules/PostModule.html",[28,0.877,35,1.876]],["body/modules/PostModule.html",[0,0.1,3,0.376,4,0.326,5,0.326,12,0.03,20,0.587,23,0.376,26,0.024,27,0.024,28,1.398,30,1.536,31,2.091,35,3.598,40,2.479,41,1.976,42,1.976,58,0.54,107,2.988,177,2.714,341,3.624,362,3.268,363,3.412,378,3.412,379,3.412,380,4.08,381,4.08]],["title/injectables/PostService.html",[186,0.38,362,1.704]],["body/injectables/PostService.html",[0,0.07,1,2.962,3,0.262,4,0.227,5,0.227,7,0.418,9,2.349,11,0.618,12,0.031,13,1.497,17,0.904,20,0.49,23,0.262,24,0.716,26,0.019,27,0.019,45,1.013,50,1.082,51,0.994,52,1.082,54,1.175,58,0.377,77,1.29,81,1.072,112,1.756,127,2.074,148,1.379,150,1.175,159,1.398,166,1.845,168,1.382,186,0.476,187,0.989,192,1.264,202,2.838,210,3.025,216,2.608,343,2.932,344,4.244,345,3.366,353,3.366,361,2.381,362,2.134,382,2.381,383,2.381,384,2.458,385,2.847,386,4.025,387,5.075,388,2.847,389,2.847,390,2.847,391,2.381,392,2.847,393,2.847,394,2.381,395,2.847,396,2.847]],["title/modules/PrismaModule.html",[28,0.877,36,1.876]],["body/modules/PrismaModule.html",[0,0.097,3,0.364,4,0.315,5,0.315,12,0.03,20,0.526,23,0.364,26,0.024,27,0.024,28,1.368,30,1.485,31,2.047,36,3.624,40,2.427,41,1.911,42,1.911,58,0.522,177,2.656,384,3.132,397,3.299,398,3.299,399,3.299,400,3.945,401,3.247,402,3.65,403,3.945]],["title/injectables/PrismaService.html",[186,0.38,384,1.556]],["body/injectables/PrismaService.html",[0,0.068,3,0.255,4,0.221,5,0.221,7,0.406,11,0.521,12,0.031,17,0.943,20,0.482,23,0.255,26,0.019,27,0.019,45,0.992,50,0.913,51,0.839,52,0.913,54,1.26,58,0.366,63,1.791,78,1.465,81,1.041,84,1.465,99,2.013,112,1.824,127,1.228,148,1.339,150,0.992,159,1.595,168,1.359,186,0.466,187,0.96,192,1.228,196,4.603,216,1.791,217,1.613,298,2.013,318,2.554,332,2.013,384,1.909,404,2.311,405,5.008,406,5.008,407,3.941,408,5.504,409,5.504,410,2.764,411,2.764,412,2.764,413,3.941,414,5.008,415,2.764,416,2.311,417,2.764,418,2.764,419,2.764,420,2.764,421,2.764,422,2.764,423,2.764,424,2.764,425,2.764,426,2.764,427,2.764,428,2.764,429,2.764,430,2.764]],["title/modules/RedisModule.html",[28,0.877,37,1.876]],["body/modules/RedisModule.html",[0,0.096,3,0.361,4,0.312,5,0.312,12,0.031,20,0.576,23,0.361,26,0.024,27,0.024,28,1.361,30,1.473,37,2.909,58,0.518,65,2.797,77,1.254,86,4.169,112,1.158,150,0.985,159,1.359,168,1.158,177,2.074,205,2.85,401,2.535,402,3.631,431,3.912,432,4.985,433,3.912,434,3.912,435,3.912,436,3.912,437,3.912,438,3.912]],["title/injectables/SessionSerializer.html",[175,1.876,186,0.38]],["body/injectables/SessionSerializer.html",[0,0.071,3,0.269,4,0.233,5,0.233,7,0.428,11,0.626,12,0.031,17,0.843,20,0.497,23,0.269,24,0.734,26,0.019,27,0.019,45,1.03,50,1.096,51,1.007,52,1.096,54,1.03,55,4.518,58,0.386,77,1.732,81,1.098,112,1.4,148,1.412,159,1.013,164,4.29,168,0.863,175,2.39,179,1.702,186,0.485,187,1.013,192,1.295,193,2.125,194,2.488,202,2.17,214,1.295,224,2.125,229,2.864,239,2.439,240,1.89,242,1.89,264,2.125,295,2.653,318,2.653,332,2.125,439,2.439,440,4.731,441,4.094,442,4.094,443,2.916,444,4.094,445,5.602,446,4.094,447,2.916,448,2.916,449,4.094,450,2.916,451,4.094,452,4.094,453,2.916]],["title/classes/SignupDto.html",[0,0.079,132,1.876]],["body/classes/SignupDto.html",[0,0.108,2,1.504,3,0.238,4,0.206,5,0.206,7,0.378,8,1.986,11,0.641,12,0.031,13,1.822,14,2.83,15,3.134,17,0.864,20,0.464,21,3.693,22,1.504,23,0.238,25,4.221,26,0.018,27,0.018,51,0.797,113,2.73,132,2.187,181,2.155,212,2.941,214,2.154,240,2.861,242,2.861,454,2.155,455,4.416,456,4.753,457,5.375,458,3.747,459,2.577,460,3.134,461,3.747,462,3.747,463,2.577,464,3.747,465,2.577,466,2.577,467,3.747,468,2.577,469,2.577,470,3.747,471,3.747,472,3.747,473,2.577,474,3.747,475,3.747,476,2.577,477,2.577,478,4.848,479,4.848,480,2.155,481,2.577,482,3.747,483,2.73,484,2.577,485,2.577,486,3.693,487,4.416]],["title/modules/UserModule.html",[28,0.877,38,1.704]],["body/modules/UserModule.html",[0,0.097,3,0.367,4,0.318,5,0.318,12,0.03,20,0.529,23,0.367,26,0.024,27,0.024,28,1.376,30,1.498,31,2.058,38,3.298,40,2.44,41,1.926,42,1.926,58,0.526,177,2.671,194,2.876,401,3.264,488,3.327,489,3.327,490,3.327,491,3.978,492,3.978]],["title/injectables/UserService.html",[186,0.38,194,1.427]],["body/injectables/UserService.html",[0,0.052,3,0.194,4,0.168,5,0.168,7,0.31,11,0.66,12,0.031,13,1.853,17,0.889,20,0.411,23,0.194,26,0.015,27,0.015,45,0.812,50,1.156,51,1.062,52,1.156,54,1.191,58,0.279,81,0.794,112,1.766,148,1.021,150,1.191,168,1.4,186,0.382,187,0.732,192,0.936,194,1.433,202,2.645,203,2.97,208,2.854,210,3.065,214,2.101,216,2.539,217,1.23,229,2.327,383,1.763,384,2.126,391,1.763,394,5.16,493,1.763,494,3.277,495,3.277,496,3.918,497,3.918,498,3.226,499,2.108,500,2.108,501,5.779,502,2.108,503,3.671,504,2.108,505,2.108,506,2.108,507,2.108,508,2.108,509,3.918,510,2.108,511,3.226,512,2.108,513,3.226,514,2.108,515,2.108,516,2.108]],["title/injectables/UtilService.html",[186,0.38,195,1.556]],["body/injectables/UtilService.html",[0,0.079,3,0.46,4,0.257,5,0.257,7,0.473,11,0.426,12,0.031,17,0.574,20,0.524,23,0.297,24,0.811,26,0.021,27,0.021,45,1.104,50,0.747,51,0.686,52,0.747,54,0.811,58,0.426,77,1.033,93,2.842,97,2.695,110,2.695,112,1.476,127,1.432,150,0.811,159,1.732,168,1.298,186,0.519,187,1.119,195,2.124,205,2.348,212,1.709,229,2.326,301,2.348,460,3.669,517,2.695,518,3.669,519,4.387,520,4.987,521,3.223,522,3.669,523,3.223,524,3.223,525,3.223,526,3.223,527,3.223,528,3.223,529,3.223,530,3.223,531,3.223,532,3.223,533,3.223,534,3.223,535,4.387,536,4.987,537,3.223,538,3.223,539,3.223,540,3.223,541,3.223,542,4.387,543,3.223,544,3.223,545,2.695,546,3.223,547,3.223,548,3.223,549,3.223]],["title/modules/UtilsModule.html",[28,0.877,39,1.876]],["body/modules/UtilsModule.html",[0,0.097,3,0.367,4,0.318,5,0.318,12,0.03,20,0.529,23,0.367,26,0.024,27,0.024,28,1.376,30,1.498,31,2.058,39,3.631,40,2.44,41,1.926,42,1.926,58,0.526,177,2.671,195,3.135,401,3.264,402,3.67,550,3.327,551,3.327,552,3.327,553,3.978,554,3.978]],["title/coverage.html",[555,3.189]],["body/coverage.html",[0,0.116,1,1.427,5,0.195,6,2.044,11,0.323,12,0.031,26,0.017,27,0.017,65,1.184,84,1.296,105,2.104,106,1.584,108,2.044,117,1.427,124,1.584,132,1.427,136,1.184,140,1.584,172,1.427,173,1.427,174,1.427,175,1.427,186,0.688,188,2.044,194,1.086,195,1.184,221,1.584,266,2.044,271,1.584,272,2.626,273,1.584,275,2.044,284,2.626,295,2.775,303,1.584,304,2.044,307,2.626,315,2.044,323,2.044,338,2.044,341,1.584,342,2.044,362,1.296,382,2.044,384,1.184,404,2.044,439,2.044,454,2.044,483,1.781,493,2.044,517,2.044,555,1.781,556,2.444,557,2.444,558,2.444,559,2.044,560,5.814,561,6.475,562,6.027,563,4.283,564,3.605,565,5.042,566,5.042,567,2.444,568,2.044,569,2.044,570,2.444,571,2.444,572,2.444,573,2.044,574,4.683,575,2.044,576,2.044,577,2.044,578,2.044,579,2.044,580,2.044,581,2.044,582,2.044,583,2.044,584,2.044,585,2.044,586,2.044,587,2.044,588,2.044,589,2.044,590,2.044,591,2.444,592,2.444]],["title/dependencies.html",[31,1.578,593,2.247]],["body/dependencies.html",[0,0.112,12,0.031,22,1.996,26,0.022,27,0.022,31,1.397,58,0.452,63,2.216,65,2.211,68,3.326,69,3.33,71,2.86,72,3.744,95,2.86,144,2.491,179,1.996,215,2.86,217,1.996,220,2.86,330,3.818,480,2.86,522,2.86,594,5.14,595,3.42,596,3.42,597,3.42,598,4.566,599,3.42,600,3.42,601,4.566,602,3.42,603,3.42,604,3.42,605,3.42,606,3.42,607,3.42,608,3.42,609,3.42,610,3.42,611,3.42,612,3.42,613,3.42,614,3.42,615,3.42,616,3.42,617,3.42,618,3.42,619,3.42,620,3.42,621,3.42,622,3.42,623,3.42,624,3.42,625,3.42,626,3.42,627,3.42,628,3.42]],["title/miscellaneous/functions.html",[629,1.741,630,3.231]],["body/miscellaneous/functions.html",[7,0.629,11,0.698,12,0.028,26,0.025,27,0.025,50,1.222,51,1.123,52,1.222,271,3.418,284,3.12,293,4.545,296,3.581,307,3.12,314,3.581,483,3.843,503,4.411,568,3.581,569,4.781,629,2.775,630,3.581,631,4.282,632,4.282,633,4.282]],["title/index.html",[7,0.395,634,2.687,635,2.687]],["body/index.html",[4,0.273,12,0.031,26,0.022,27,0.022,99,2.491,373,2.491,416,2.86,456,2.86,555,2.491,636,3.42,637,3.42,638,4.566,639,3.42,640,3.42,641,3.42,642,3.42,643,3.42,644,3.42,645,5.14,646,3.42,647,3.42,648,3.42,649,3.42,650,6.002,651,3.42,652,3.42,653,5.879,654,3.42,655,3.42,656,4.566,657,3.42,658,3.42,659,3.42,660,4.566,661,4.566,662,3.42,663,3.42,664,3.42,665,4.566,666,4.566,667,3.42,668,3.42,669,3.42,670,3.42,671,3.42,672,2.86,673,3.42,674,3.42,675,3.42,676,3.42,677,3.42,678,3.42,679,3.42,680,3.42,681,3.42,682,2.86,683,3.42,684,3.42,685,3.42,686,3.42,687,3.42,688,3.42,689,2.86]],["title/modules.html",[30,1.648]],["body/modules.html",[12,0.025,26,0.025,27,0.025,29,2.788,30,1.62,34,2.511,35,2.511,36,2.511,37,2.511,38,2.281,39,2.511,545,3.598,672,5.223,690,6.246,691,6.246,692,6.327,693,4.302]],["title/overview.html",[694,3.661]],["body/overview.html",[2,1.671,12,0.031,26,0.019,27,0.019,29,4.045,30,1.078,31,1.651,32,2.395,33,2.395,34,3.666,35,3.132,36,3.25,37,2.734,38,3.034,39,3.25,40,1.957,41,1.387,42,1.387,107,1.671,136,2.268,169,2.395,170,2.395,172,2.734,173,2.734,174,2.734,175,2.734,187,0.995,194,2.542,195,2.772,228,2.086,274,2.086,362,2.483,378,2.395,379,2.395,384,2.772,397,2.395,398,2.395,399,2.395,488,2.395,489,2.395,490,2.395,550,2.395,551,2.395,552,2.395,694,2.395,695,2.864,696,4.042,697,2.864]],["title/properties.html",[8,2.048,593,2.247]],["body/properties.html",[8,2.558,12,0.03,26,0.027,27,0.027,373,3.516,682,4.036,689,4.036,698,4.826,699,4.826,700,4.826]],["title/miscellaneous/variables.html",[629,1.741,701,3.231]],["body/miscellaneous/variables.html",[7,0.275,9,1.092,11,0.681,12,0.032,13,0.943,24,1.364,26,0.014,27,0.014,65,1.425,77,0.943,84,1.559,93,1.213,111,1.363,112,0.554,113,1.363,114,1.565,115,1.363,122,0.992,127,0.831,132,1.092,150,1.251,166,1.906,168,0.871,195,0.906,202,2.808,203,0.992,208,1.363,210,1.213,212,1.559,214,1.307,221,1.906,228,2.143,229,2.183,240,3.221,241,1.565,242,3.221,243,1.565,264,1.363,297,3.462,343,1.363,486,4.533,494,1.565,495,1.565,518,1.565,559,1.565,573,1.565,574,4.306,575,1.565,576,2.46,577,1.565,578,2.46,579,1.565,580,2.46,581,1.565,582,2.46,583,1.565,584,2.46,585,1.565,586,2.46,587,1.565,588,2.46,589,1.565,590,2.46,629,1.213,701,1.565,702,1.872,703,1.872,704,1.872,705,1.872,706,1.872,707,1.872,708,1.872,709,1.872,710,1.872,711,1.872,712,1.872,713,1.872,714,5.296,715,1.872,716,1.872,717,4.971,718,4.118,719,4.118,720,4.118,721,1.872,722,1.872,723,2.941,724,1.872,725,1.872,726,1.872,727,1.872,728,1.872,729,1.872,730,1.872,731,1.872,732,1.872,733,2.941,734,1.872,735,1.872,736,2.941,737,2.941,738,1.872,739,1.872,740,1.872,741,1.872,742,1.872,743,1.872,744,1.872,745,1.872,746,1.872,747,1.872,748,1.872,749,1.872,750,1.872,751,1.872,752,1.872,753,1.872,754,1.872]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":699,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["1.17.5",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2",{"_index":696,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["2160000000",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["25",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["394",{"_index":743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":697,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["465",{"_index":532,"title":{},"body":{"injectables/UtilService.html":{}}}],["482",{"_index":741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.0.1",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["587",{"_index":531,"title":{},"body":{"injectables/UtilService.html":{}}}],["6",{"_index":472,"title":{},"body":{"classes/SignupDto.html":{}}}],["6.0.4",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["6.7.7",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":695,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["775",{"_index":745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.3.2",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["accepted",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["account",{"_index":460,"title":{},"body":{"classes/SignupDto.html":{},"injectables/UtilService.html":{}}}],["account.pass",{"_index":538,"title":{},"body":{"injectables/UtilService.html":{}}}],["account.user",{"_index":534,"title":{},"body":{"injectables/UtilService.html":{}}}],["addpost",{"_index":343,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["addpost(@body",{"_index":370,"title":{},"body":{"controllers/PostController.html":{}}}],["addpost(body",{"_index":346,"title":{},"body":{"controllers/PostController.html":{}}}],["addpost(data",{"_index":386,"title":{},"body":{"injectables/PostService.html":{}}}],["addpostdto",{"_index":1,"title":{"classes/AddPostDto.html":{}},"body":{"classes/AddPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["address",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["already",{"_index":461,"title":{},"body":{"classes/SignupDto.html":{}}}],["amazing",{"_index":673,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiokresponse",{"_index":365,"title":{},"body":{"controllers/PostController.html":{}}}],["apiokresponse({description",{"_index":348,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["apitags('auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('post",{"_index":367,"title":{},"body":{"controllers/PostController.html":{}}}],["app",{"_index":416,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":422,"title":{},"body":{"injectables/PrismaService.html":{}}}],["applications",{"_index":644,"title":{},"body":{"index.html":{}}}],["apply",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["atleast",{"_index":471,"title":{},"body":{"classes/SignupDto.html":{}}}],["auth",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UtilService.html":{}}}],["auth.constants",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.controller",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.constants",{"_index":294,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{}}}],["auth/auth.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/isauthenticated.guard",{"_index":360,"title":{},"body":{"controllers/PostController.html":{}}}],["auth/guard/isconfirmed.guard",{"_index":364,"title":{},"body":{"controllers/PostController.html":{}}}],["authcontroller",{"_index":106,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":317,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard('local",{"_index":319,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":34,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":682,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorid",{"_index":392,"title":{},"body":{"injectables/PostService.html":{}}}],["authservice",{"_index":136,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":545,"title":{},"body":{"injectables/UtilService.html":{},"modules.html":{}}}],["await",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":674,"title":{},"body":{"index.html":{}}}],["bc0uix8",{"_index":750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash('123456",{"_index":728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash('test",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data.password",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{}}}],["boolean",{"_index":281,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["bootstrap",{"_index":569,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":692,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":690,"title":{},"body":{"modules.html":{}}}],["building",{"_index":639,"title":{},"body":{"index.html":{}}}],["callback",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":276,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["canactivate(context",{"_index":277,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["characters",{"_index":484,"title":{},"body":{"classes/SignupDto.html":{}}}],["characters'})@notcontains",{"_index":473,"title":{},"body":{"classes/SignupDto.html":{}}}],["class",{"_index":0,"title":{"classes/AddPostDto.html":{},"classes/ConfirmUserDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{}},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddPostDto.html":{},"classes/ConfirmUserDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"overview.html":{}}}],["cleandatabase",{"_index":406,"title":{},"body":{"injectables/PrismaService.html":{}}}],["client",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{}}}],["client.connect",{"_index":438,"title":{},"body":{"modules/RedisModule.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":378,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":379,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":397,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":398,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":399,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":488,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":489,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":490,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_utilsmodule",{"_index":550,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["cluster_utilsmodule_exports",{"_index":551,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["cluster_utilsmodule_providers",{"_index":552,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["config",{"_index":334,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["configmodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{}}}],["configure",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["confirmed",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionSerializer.html":{},"miscellaneous/variables.html":{}}}],["confirmuser",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["confirmuser(@body",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmuser(body",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmuser(undefined",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmuserdto",{"_index":117,"title":{"classes/ConfirmUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"coverage.html":{}}}],["confirmuserprefix",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["connect",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["console.error(err",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('message",{"_index":540,"title":{},"body":{"injectables/UtilService.html":{}}}],["console.log('preview",{"_index":548,"title":{},"body":{"injectables/UtilService.html":{}}}],["const",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"injectables/UtilService.html":{}}}],["constraints",{"_index":302,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["constructor",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(redis",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["constructor(authservice",{"_index":324,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":410,"title":{},"body":{"injectables/PrismaService.html":{}}}],["constructor(prisma",{"_index":383,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{}}}],["constructor(protected",{"_index":312,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{}}}],["constructor(redis",{"_index":286,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{}}}],["constructor(userservice",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/SessionSerializer.html":{}}}],["consumer",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":474,"title":{},"body":{"classes/SignupDto.html":{}}}],["context",{"_index":280,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":282,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["controller",{"_index":105,"title":{"controllers/AuthController.html":{},"controllers/PostController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('post",{"_index":368,"title":{},"body":{"controllers/PostController.html":{}}}],["controllers",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["cookie",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["coverage",{"_index":555,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createclient",{"_index":432,"title":{},"body":{"modules/RedisModule.html":{}}}],["createconfirmationurl",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["createconfirmationurl(id",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["createdat",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":494,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["createuser(user",{"_index":500,"title":{},"body":{"injectables/UserService.html":{}}}],["data",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.firstname",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.lastname",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.password",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"classes/AddPostDto.html":{},"controllers/AuthController.html":{},"classes/ConfirmUserDto.html":{},"controllers/PostController.html":{},"classes/SignupDto.html":{}}}],["default",{"_index":24,"title":{},"body":{"classes/AddPostDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SessionSerializer.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":373,"title":{},"body":{"controllers/PostController.html":{},"index.html":{},"properties.html":{}}}],["deserializeuser",{"_index":441,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["deserializeuser(payload",{"_index":444,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["development",{"_index":652,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":445,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["done(null",{"_index":452,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["dto",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.firstname",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto.lastname",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto/addpost.dto",{"_index":361,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto/confirmuser.dto",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/login.dto",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["e2e",{"_index":662,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":640,"title":{},"body":{"index.html":{}}}],["email",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["email'})@isuserexists({message",{"_index":459,"title":{},"body":{"classes/SignupDto.html":{}}}],["empty",{"_index":16,"title":{},"body":{"classes/AddPostDto.html":{}}}],["enableshutdownhooks",{"_index":407,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":413,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enter",{"_index":457,"title":{},"body":{"classes/SignupDto.html":{}}}],["envelope",{"_index":751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["envelopetime",{"_index":740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionSerializer.html":{}}}],["error",{"_index":451,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["error,user",{"_index":446,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["ethereal",{"_index":536,"title":{},"body":{"injectables/UtilService.html":{}}}],["executioncontext",{"_index":278,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["exists",{"_index":462,"title":{},"body":{"classes/SignupDto.html":{}}}],["expired",{"_index":269,"title":{},"body":{"classes/ConfirmUserDto.html":{}}}],["export",{"_index":23,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{}}}],["exports",{"_index":401,"title":{},"body":{"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{}}}],["express",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"dependencies.html":{}}}],["extends",{"_index":318,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{}}}],["faker.datatype.uuid",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.name.firstname",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.name.lastname",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["fetches",{"_index":358,"title":{},"body":{"controllers/PostController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{}}}],["find",{"_index":354,"title":{},"body":{"controllers/PostController.html":{}}}],["findallposts",{"_index":344,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["findbyemail",{"_index":495,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["findbyemail(email",{"_index":504,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":496,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(id",{"_index":506,"title":{},"body":{"injectables/UserService.html":{}}}],["findfirst",{"_index":726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findpostbyid",{"_index":345,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["findpostbyid(@param('id",{"_index":376,"title":{},"body":{"controllers/PostController.html":{}}}],["findpostbyid(id",{"_index":353,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["first",{"_index":464,"title":{},"body":{"classes/SignupDto.html":{}}}],["firstname",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"miscellaneous/variables.html":{}}}],["foo",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["foo@example.com",{"_index":752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forroutes",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["framework",{"_index":638,"title":{},"body":{"index.html":{}}}],["fred",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":295,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/SessionSerializer.html":{},"coverage.html":{}}}],["functions",{"_index":630,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":535,"title":{},"body":{"injectables/UtilService.html":{}}}],["get(':id",{"_index":375,"title":{},"body":{"controllers/PostController.html":{}}}],["getting",{"_index":634,"title":{"index.html":{}},"body":{}}],["global",{"_index":402,"title":{},"body":{"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UtilsModule.html":{}}}],["graph",{"_index":693,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":669,"title":{},"body":{"index.html":{}}}],["guard",{"_index":272,"title":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{}},"body":{"coverage.html":{}}}],["guard/localauth.guard",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards",{"_index":274,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"overview.html":{}}}],["hello",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["here",{"_index":679,"title":{},"body":{"index.html":{}}}],["host",{"_index":528,"title":{},"body":{"injectables/UtilService.html":{}}}],["html",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["httponly",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":686,"title":{},"body":{"index.html":{}}}],["id",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["id'})@get(':id",{"_index":355,"title":{},"body":{"controllers/PostController.html":{}}}],["identifier",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":20,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AddPostDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":414,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{}}}],["info.messageid",{"_index":543,"title":{},"body":{"injectables/UtilService.html":{}}}],["inject",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["inject(redis",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":186,"title":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{}},"body":{"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["injectables",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"overview.html":{}}}],["installation",{"_index":649,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":651,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":268,"title":{},"body":{"classes/ConfirmUserDto.html":{}}}],["isarray",{"_index":350,"title":{},"body":{"controllers/PostController.html":{}}}],["isauthenticatedguard",{"_index":273,"title":{"guards/IsAuthenticatedGuard.html":{}},"body":{"guards/IsAuthenticatedGuard.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["isconfirmedguard",{"_index":303,"title":{"guards/IsConfirmedGuard.html":{}},"body":{"guards/IsConfirmedGuard.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["isconfirmtokenvalid",{"_index":271,"title":{},"body":{"classes/ConfirmUserDto.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isconfirmtokenvalid(validationoptions",{"_index":296,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"miscellaneous/functions.html":{}}}],["isconfirmtokenvalid({message",{"_index":267,"title":{},"body":{"classes/ConfirmUserDto.html":{}}}],["isconfirmtokenvalidconstraint",{"_index":172,"title":{"injectables/IsConfirmTokenValidConstraint.html":{}},"body":{"modules/AuthModule.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"coverage.html":{},"overview.html":{}}}],["isemail",{"_index":455,"title":{},"body":{"classes/SignupDto.html":{}}}],["isemailexists",{"_index":311,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{}}}],["isglobal",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":21,"title":{},"body":{"classes/AddPostDto.html":{},"classes/SignupDto.html":{}}}],["isnotempty({message",{"_index":15,"title":{},"body":{"classes/AddPostDto.html":{},"classes/SignupDto.html":{}}}],["isuserexists",{"_index":483,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isuserexists(validationoptions",{"_index":314,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{},"miscellaneous/functions.html":{}}}],["isuserexistsconstraint",{"_index":173,"title":{"injectables/IsUserExistsConstraint.html":{}},"body":{"modules/AuthModule.html":{},"injectables/IsUserExistsConstraint.html":{},"coverage.html":{},"overview.html":{}}}],["isvalid",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["jest.fn",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((callback",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((dto",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((key",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn(async",{"_index":727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":676,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["kamil",{"_index":683,"title":{},"body":{"index.html":{}}}],["key",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":467,"title":{},"body":{"classes/SignupDto.html":{}}}],["lastname",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"miscellaneous/variables.html":{}}}],["legacymode",{"_index":436,"title":{},"body":{"modules/RedisModule.html":{}}}],["letter,symbols",{"_index":475,"title":{},"body":{"classes/SignupDto.html":{}}}],["license",{"_index":689,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":666,"title":{},"body":{"index.html":{}}}],["line",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["list",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{}}}],["local",{"_index":330,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":140,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":174,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logerrors",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignupDto.html":{},"miscellaneous/variables.html":{}}}],["login(@req",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":124,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["logout(@req",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutpromise",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["mail",{"_index":523,"title":{},"body":{"injectables/UtilService.html":{}}}],["mail.options",{"_index":520,"title":{},"body":{"injectables/UtilService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxage",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":25,"title":{},"body":{"classes/AddPostDto.html":{},"classes/ConfirmUserDto.html":{},"classes/SignupDto.html":{}}}],["messageid",{"_index":753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagesize",{"_index":744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagetime",{"_index":742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":357,"title":{},"body":{"controllers/PostController.html":{}}}],["methods",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{}}}],["middlewareconsumer",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["minlength",{"_index":481,"title":{},"body":{"classes/SignupDto.html":{}}}],["minlength(6",{"_index":470,"title":{},"body":{"classes/SignupDto.html":{}}}],["miscellaneous",{"_index":629,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":665,"title":{},"body":{"index.html":{}}}],["mockauthservice",{"_index":578,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockconfigservice",{"_index":580,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockpostservice",{"_index":582,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockprismaservice",{"_index":584,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockredisservice",{"_index":586,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockrequest",{"_index":576,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockuserservice",{"_index":588,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockutilservice",{"_index":590,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":656,"title":{},"body":{"index.html":{}}}],["modelnames",{"_index":426,"title":{},"body":{"injectables/PrismaService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":678,"title":{},"body":{"index.html":{}}}],["msgid=yslz4mnyhere3klaysl0qzbmr1scridwaaaaamrsw1.gjzewfdy",{"_index":749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":684,"title":{},"body":{"index.html":{}}}],["name",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/functions.html":{}}}],["name'})@transform",{"_index":465,"title":{},"body":{"classes/SignupDto.html":{}}}],["name.'})@transform",{"_index":468,"title":{},"body":{"classes/SignupDto.html":{}}}],["nest",{"_index":645,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":688,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionSerializer.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"dependencies.html":{}}}],["nestmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":637,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":522,"title":{},"body":{"injectables/UtilService.html":{},"dependencies.html":{}}}],["nodemailer.createtestaccount",{"_index":525,"title":{},"body":{"injectables/UtilService.html":{}}}],["nodemailer.createtransport",{"_index":527,"title":{},"body":{"injectables/UtilService.html":{}}}],["nodemailer.gettestmessageurl(info",{"_index":549,"title":{},"body":{"injectables/UtilService.html":{}}}],["nodemailer/lib/mailer",{"_index":524,"title":{},"body":{"injectables/UtilService.html":{}}}],["notcontains",{"_index":482,"title":{},"body":{"classes/SignupDto.html":{}}}],["npm",{"_index":650,"title":{},"body":{"index.html":{}}}],["null",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["numbers",{"_index":485,"title":{},"body":{"classes/SignupDto.html":{}}}],["numbers'})@transform",{"_index":476,"title":{},"body":{"classes/SignupDto.html":{}}}],["object",{"_index":297,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"miscellaneous/variables.html":{}}}],["object.constructor",{"_index":300,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["object.getownpropertynames(prisma",{"_index":425,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduledestroy",{"_index":408,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":409,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":667,"title":{},"body":{"index.html":{}}}],["optional",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":301,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/UtilService.html":{}}}],["out",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["overview",{"_index":694,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":593,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":359,"title":{},"body":{"controllers/PostController.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":537,"title":{},"body":{"injectables/UtilService.html":{}}}],["passport",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport.initialize",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["passport.session",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["passportmodule",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportserializer",{"_index":440,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["passportstrategy",{"_index":328,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":331,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":448,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["pending",{"_index":739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plain",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":456,"title":{},"body":{"classes/SignupDto.html":{},"index.html":{}}}],["port",{"_index":530,"title":{},"body":{"injectables/UtilService.html":{}}}],["ports",{"_index":533,"title":{},"body":{"injectables/UtilService.html":{}}}],["post",{"_index":9,"title":{},"body":{"classes/AddPostDto.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["post('/confirm",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/logout",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.controller",{"_index":381,"title":{},"body":{"modules/PostModule.html":{}}}],["post.service",{"_index":363,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["post/post.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":341,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postmodule",{"_index":35,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["posts",{"_index":349,"title":{},"body":{"controllers/PostController.html":{}}}],["postservice",{"_index":362,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["posttype",{"_index":366,"title":{},"body":{"controllers/PostController.html":{}}}],["prefix",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["preview",{"_index":544,"title":{},"body":{"injectables/UtilService.html":{}}}],["prisma",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["prisma.service",{"_index":403,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["prisma.userselect",{"_index":501,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userupdateinput",{"_index":509,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":391,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["prisma[model].deletemany",{"_index":430,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclient",{"_index":405,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":36,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":384,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["process.env.node_env",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.redis_url",{"_index":437,"title":{},"body":{"modules/RedisModule.html":{}}}],["process.env.session_secret",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["progressive",{"_index":636,"title":{},"body":{"index.html":{}}}],["project",{"_index":668,"title":{},"body":{"index.html":{}}}],["promise",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["promise((resolve",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["promise.all(modelnames.map((model",{"_index":429,"title":{},"body":{"injectables/PrismaService.html":{}}}],["promise.resolve",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/AddPostDto.html":{},"classes/ConfirmUserDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"properties.html":{}}}],["propertyname",{"_index":298,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/PrismaService.html":{}}}],["propertyname.startswith('_",{"_index":428,"title":{},"body":{"injectables/PrismaService.html":{}}}],["propertynames",{"_index":424,"title":{},"body":{"injectables/PrismaService.html":{}}}],["propertynames.filter",{"_index":427,"title":{},"body":{"injectables/PrismaService.html":{}}}],["provide",{"_index":434,"title":{},"body":{"modules/RedisModule.html":{}}}],["providers",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{}}}],["qid",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":677,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{}}}],["receivers",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["redis",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"modules/RedisModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["redis.constants",{"_index":433,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis/client",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["redis/redis.constants",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["redis/redis.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["redisclienttype",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["redismodule",{"_index":37,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisstore",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore(session",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["reflect",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["registerdecorator",{"_index":290,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["reject",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["rejected",{"_index":738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":648,"title":{},"body":{"index.html":{}}}],["req",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["req.logout((err",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.id",{"_index":372,"title":{},"body":{"controllers/PostController.html":{}}}],["request",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"guards/IsAuthenticatedGuard.html":{},"guards/IsConfirmedGuard.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PostController.html":{},"miscellaneous/variables.html":{}}}],["request.isauthenticated",{"_index":283,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{}}}],["request.user.confirmed",{"_index":306,"title":{},"body":{"guards/IsConfirmedGuard.html":{}}}],["resave",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["resolve",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["response",{"_index":746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result",{"_index":320,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["results",{"_index":26,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{}}}],["rimraf",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":653,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":542,"title":{},"body":{"injectables/UtilService.html":{}}}],["saveuninitialized",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["scalable",{"_index":641,"title":{},"body":{"index.html":{}}}],["secret",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["secure",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"injectables/UtilService.html":{}}}],["select",{"_index":394,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["sendconfirmationmail",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendconfirmationmail(to",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["sender",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["sending",{"_index":546,"title":{},"body":{"injectables/UtilService.html":{}}}],["sendmail",{"_index":518,"title":{},"body":{"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["sendmail(options",{"_index":519,"title":{},"body":{"injectables/UtilService.html":{}}}],["sent",{"_index":541,"title":{},"body":{"injectables/UtilService.html":{}}}],["serializeuser",{"_index":442,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["serializeuser(user",{"_index":449,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["server",{"_index":642,"title":{},"body":{"index.html":{}}}],["session",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["session.serializer",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["sessionserializer",{"_index":175,"title":{"injectables/SessionSerializer.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SessionSerializer.html":{},"coverage.html":{},"overview.html":{}}}],["setex",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":643,"title":{},"body":{"index.html":{}}}],["signup",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["signup(@body",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(data",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupdto",{"_index":132,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["smtp.ethereal.email",{"_index":529,"title":{},"body":{"injectables/UtilService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"index.html":{}}}],["sponsors",{"_index":671,"title":{},"body":{"index.html":{}}}],["src/.../auth.constants.ts",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../isconfirmtokenvalid.validator.ts",{"_index":632,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../isuserexists.validator.ts",{"_index":633,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":631,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mockauthservice.ts",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockconfigservice.ts",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockpostservice.ts",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockprismaservice.ts",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockredisservice.ts",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockrequest.ts",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockuserservice.ts",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mockutilservice.ts",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../redis.constants.ts",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:30",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.constants.ts",{"_index":559,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.controller.ts",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:62",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/confirmuser.dto.ts",{"_index":266,"title":{},"body":{"classes/ConfirmUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/confirmuser.dto.ts:5",{"_index":270,"title":{},"body":{"classes/ConfirmUserDto.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":338,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:2",{"_index":339,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:3",{"_index":340,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/signup.dto.ts",{"_index":454,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/auth/dto/signup.dto.ts:15",{"_index":477,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/dto/signup.dto.ts:19",{"_index":466,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/dto/signup.dto.ts:23",{"_index":469,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/dto/signup.dto.ts:8",{"_index":463,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/guard/isauthenticated.guard.ts",{"_index":275,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{},"coverage.html":{}}}],["src/auth/guard/isauthenticated.guard.ts:5",{"_index":279,"title":{},"body":{"guards/IsAuthenticatedGuard.html":{}}}],["src/auth/guard/isconfirmed.guard.ts",{"_index":304,"title":{},"body":{"guards/IsConfirmedGuard.html":{},"coverage.html":{}}}],["src/auth/guard/isconfirmed.guard.ts:5",{"_index":305,"title":{},"body":{"guards/IsConfirmedGuard.html":{}}}],["src/auth/guard/localauth.guard.ts",{"_index":315,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/localauth.guard.ts:6",{"_index":316,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["src/auth/session.serializer.ts",{"_index":439,"title":{},"body":{"injectables/SessionSerializer.html":{},"coverage.html":{}}}],["src/auth/session.serializer.ts:10",{"_index":450,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["src/auth/session.serializer.ts:14",{"_index":447,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["src/auth/session.serializer.ts:6",{"_index":443,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["src/auth/strategy/local.strategy.ts",{"_index":323,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/local.strategy.ts:11",{"_index":326,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts:7",{"_index":325,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/main.ts",{"_index":568,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/dto/addpost.dto.ts",{"_index":6,"title":{},"body":{"classes/AddPostDto.html":{},"coverage.html":{}}}],["src/post/dto/addpost.dto.ts:5",{"_index":19,"title":{},"body":{"classes/AddPostDto.html":{}}}],["src/post/dto/addpost.dto.ts:8",{"_index":18,"title":{},"body":{"classes/AddPostDto.html":{}}}],["src/post/post.controller.ts",{"_index":342,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:24",{"_index":347,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:30",{"_index":352,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:38",{"_index":356,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.module.ts",{"_index":380,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":382,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:21",{"_index":389,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:25",{"_index":390,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:6",{"_index":385,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:9",{"_index":388,"title":{},"body":{"injectables/PostService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":400,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":404,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:14",{"_index":411,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:18",{"_index":418,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:22",{"_index":417,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:26",{"_index":415,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:32",{"_index":412,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/redis/redis.constants.ts",{"_index":573,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/redis/redis.module.ts",{"_index":431,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/test",{"_index":574,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.module.ts",{"_index":491,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":493,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:19",{"_index":507,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:29",{"_index":502,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:39",{"_index":510,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:51",{"_index":512,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:6",{"_index":499,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":505,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/utils.module.ts",{"_index":553,"title":{},"body":{"modules/UtilsModule.html":{}}}],["src/utils/utils.service.ts",{"_index":517,"title":{},"body":{"injectables/UtilService.html":{},"coverage.html":{}}}],["src/utils/utils.service.ts:7",{"_index":521,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/validators/isconfirmtokenvalid.validator.ts",{"_index":284,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/validators/isconfirmtokenvalid.validator.ts:16",{"_index":287,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{}}}],["src/validators/isconfirmtokenvalid.validator.ts:18",{"_index":289,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{}}}],["src/validators/isuserexists.validator.ts",{"_index":307,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/validators/isuserexists.validator.ts:12",{"_index":308,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{}}}],["src/validators/isuserexists.validator.ts:14",{"_index":310,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{}}}],["start",{"_index":654,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":657,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":658,"title":{},"body":{"index.html":{}}}],["started",{"_index":635,"title":{"index.html":{}},"body":{}}],["starter",{"_index":647,"title":{},"body":{"index.html":{}}}],["statements",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["status=new",{"_index":748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stay",{"_index":680,"title":{},"body":{"index.html":{}}}],["store",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["strategy",{"_index":329,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["strategy/local.strategy",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":13,"title":{},"body":{"classes/AddPostDto.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":332,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{}}}],["super.canactivate(context",{"_index":321,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["super.login(request",{"_index":322,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["support",{"_index":672,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":691,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["symbol('auth:redis",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":299,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["test",{"_index":661,"title":{},"body":{"index.html":{}}}],["test4@gmail.com",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":664,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":663,"title":{},"body":{"index.html":{}}}],["tests",{"_index":660,"title":{},"body":{"index.html":{}}}],["text",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["thanks",{"_index":670,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":419,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":420,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":421,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.confirmuser(body",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(body",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":335,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('node_env",{"_index":423,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.configservice.get('origin')}/auth/confirm/${token",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createconfirmationurl(user.id",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postservice.addpost(body",{"_index":371,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findallposts",{"_index":374,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findpostbyid(id",{"_index":377,"title":{},"body":{"controllers/PostController.html":{}}}],["this.prisma.post.create",{"_index":393,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findmany",{"_index":395,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findunique",{"_index":396,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.user.count",{"_index":516,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.create",{"_index":514,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findfirst",{"_index":513,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":515,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["this.redis.del(confirmuserprefix",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redis.setex(confirmuserprefix",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redis.v4.get(confirmuserprefix",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["this.sendconfirmationmail",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createuser(data",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(email",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(payload.id",{"_index":453,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["this.userservice.updateuser(id",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.userexists(email",{"_index":313,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{}}}],["this.utilservice.sendmail",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["through",{"_index":547,"title":{},"body":{"injectables/UtilService.html":{}}}],["throw",{"_index":336,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["title",{"_index":10,"title":{},"body":{"classes/AddPostDto.html":{}}}],["token",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"injectables/IsConfirmTokenValidConstraint.html":{}}}],["touch",{"_index":681,"title":{},"body":{"index.html":{}}}],["transform",{"_index":478,"title":{},"body":{"classes/SignupDto.html":{}}}],["transformer",{"_index":480,"title":{},"body":{"classes/SignupDto.html":{},"dependencies.html":{}}}],["transformfnparams",{"_index":479,"title":{},"body":{"classes/SignupDto.html":{}}}],["transporter",{"_index":526,"title":{},"body":{"injectables/UtilService.html":{}}}],["transporter.sendmail(options",{"_index":539,"title":{},"body":{"injectables/UtilService.html":{}}}],["true",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/RedisModule.html":{},"injectables/SessionSerializer.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["true})@get",{"_index":351,"title":{},"body":{"controllers/PostController.html":{}}}],["twitter",{"_index":687,"title":{},"body":{"index.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AddPostDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmUserDto.html":{},"guards/IsAuthenticatedGuard.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"guards/IsConfirmedGuard.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/SessionSerializer.html":{},"classes/SignupDto.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types/express",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":646,"title":{},"body":{"index.html":{}}}],["ui",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":327,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('incorrect",{"_index":337,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unit",{"_index":659,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":700,"title":{},"body":{"properties.html":{}}}],["updatedat",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuser",{"_index":497,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(id",{"_index":508,"title":{},"body":{"injectables/UserService.html":{}}}],["url",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"injectables/UtilService.html":{}}}],["usefactory",{"_index":435,"title":{},"body":{"modules/RedisModule.html":{}}}],["useguards",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["useguards(isauthenticatedguard",{"_index":369,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(localauthguard",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('/login')@apibody({type",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionSerializer.html":{},"injectables/UserService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["user.firstname",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["user.id",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionSerializer.html":{}}}],["user.lastname",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["user.password",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":492,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/SessionSerializer.html":{}}}],["userexists",{"_index":498,"title":{},"body":{"injectables/UserService.html":{}}}],["userexists(email",{"_index":511,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":387,"title":{},"body":{"injectables/PostService.html":{}}}],["usermodule",{"_index":38,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":333,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userservice",{"_index":194,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/SessionSerializer.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["utils.service",{"_index":554,"title":{},"body":{"modules/UtilsModule.html":{}}}],["utils/mocks/express/mockrequest.ts",{"_index":575,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockauthservice.ts",{"_index":577,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockconfigservice.ts",{"_index":579,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockpostservice.ts",{"_index":581,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockprismaservice.ts",{"_index":583,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockredisservice.ts",{"_index":585,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockuserservice.ts",{"_index":587,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/mocks/services/mockutilservice.ts",{"_index":589,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/utils.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/utils.service",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["utilservice",{"_index":195,"title":{"injectables/UtilService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/UtilService.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["utilsmodule",{"_index":39,"title":{"modules/UtilsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UtilsModule.html":{},"modules.html":{},"overview.html":{}}}],["uuid",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["v4",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":458,"title":{},"body":{"classes/SignupDto.html":{}}}],["validate",{"_index":285,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":309,"title":{},"body":{"injectables/IsUserExistsConstraint.html":{},"injectables/LocalStrategy.html":{}}}],["validate(token",{"_index":288,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{}}}],["validateuser",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationoptions",{"_index":293,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":22,"title":{},"body":{"classes/AddPostDto.html":{},"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{},"classes/SignupDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":291,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["validatorconstraintinterface",{"_index":292,"title":{},"body":{"injectables/IsConfirmTokenValidConstraint.html":{},"injectables/IsUserExistsConstraint.html":{}}}],["validators/isconfirmtokenvalid.validator",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"classes/ConfirmUserDto.html":{}}}],["validators/isuserexists.validator",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"classes/SignupDto.html":{}}}],["value",{"_index":486,"title":{},"body":{"classes/SignupDto.html":{},"miscellaneous/variables.html":{}}}],["value?.trim",{"_index":487,"title":{},"body":{"classes/SignupDto.html":{}}}],["variable",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":701,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":698,"title":{},"body":{"properties.html":{}}}],["void",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionSerializer.html":{}}}],["watch",{"_index":655,"title":{},"body":{"index.html":{}}}],["website",{"_index":685,"title":{},"body":{"index.html":{}}}],["world",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["yes",{"_index":503,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":675,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddPostDto.html":{"url":"classes/AddPostDto.html","title":"class - AddPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/AddPost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                post\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Post cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/AddPost.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'title cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/AddPost.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport default class AddPostDto {\n  @IsNotEmpty({ message: 'title cannot be empty' })\n  title: string;\n\n  @IsNotEmpty({ message: 'Post cannot be empty' })\n  post: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUtilsModule\n\nUtilsModule\n\nAppModule -->\n\nUtilsModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UtilsModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Inject, MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport AuthModule from './auth/auth.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { PostModule } from './post/post.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { RedisModule } from './redis/redis.module';\nimport { REDIS } from './redis/redis.constants';\nimport { UtilsModule } from './utils/utils.module';\nimport * as session from 'express-session';\nimport * as RedisStore from 'connect-redis';\nimport * as passport from 'passport';\nimport { RedisClientType } from 'redis';\nimport { UserModule } from './user/user.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    RedisModule,\n    AuthModule,\n    PrismaModule,\n    PostModule,\n    UtilsModule,\n    UserModule,\n  ],\n})\nexport class AppModule implements NestModule {\n  constructor(@Inject(REDIS) private readonly redis: RedisClientType) {}\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(\n        session({\n          store: new (RedisStore(session))({\n            client: this.redis as any,\n            logErrors: true,\n          }),\n          name: 'qid',\n          secret: process.env.SESSION_SECRET,\n          resave: false,\n          saveUninitialized: false,\n          cookie: {\n            httpOnly: true,\n            secure: process.env.NODE_ENV == 'production',\n            maxAge: 2160000000,\n          },\n        }),\n        passport.initialize(),\n        passport.session(),\n      )\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                confirmUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmUser\n                        \n                    \n                \n            \n            \n                \nconfirmUser(body: ConfirmUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/confirm')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                ConfirmUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/login')@ApiBody({type: LoginDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(body: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport AuthService from './auth.service';\nimport { SignupDto } from './dto';\nimport ConfirmUserDto from './dto/ConfirmUser.dto';\nimport LocalAuthGuard from './guard/LocalAuth.guard';\nimport { Request } from 'express';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport LoginDto from './dto/Login.dto';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport default class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('/signup')\n  signup(@Body() body: SignupDto) {\n    return this.authService.signup(body);\n  }\n\n  @Post('/confirm')\n  confirmUser(@Body() body: ConfirmUserDto) {\n    return this.authService.confirmUser(body);\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @Post('/login')\n  @ApiBody({ type: LoginDto })\n  async login(@Req() req: Request) {\n    return req.user;\n  }\n\n  @Post('/logout')\n  async logout(@Req() req: Request) {\n    const logoutPromise = new Promise((resolve, reject) => {\n      req.logout((err) => {\n        if (err) {\n          console.error(err);\n          return reject({ success: false });\n        }\n        return resolve({ success: true });\n      });\n    });\n    return await logoutPromise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nIsConfirmTokenValidConstraint\n\nIsConfirmTokenValidConstraint\n\nAuthModule -->\n\nIsConfirmTokenValidConstraint->AuthModule\n\n\n\n\n\nIsUserExistsConstraint\n\nIsUserExistsConstraint\n\nAuthModule -->\n\nIsUserExistsConstraint->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionSerializer\n\nSessionSerializer\n\nAuthModule -->\n\nSessionSerializer->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            IsConfirmTokenValidConstraint\n                        \n                        \n                            IsUserExistsConstraint\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            SessionSerializer\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { IsConfirmTokenValidConstraint } from '../validators/IsConfirmTokenValid.validator';\nimport { UserModule } from '../user/user.module';\nimport { IsUserExistsConstraint } from '../validators/isUserExists.validator';\nimport AuthController from './auth.controller';\nimport AuthService from './auth.service';\nimport SessionSerializer from './session.serializer';\nimport LocalStrategy from './strategy/local.strategy';\n\n@Module({\n  imports: [UserModule, PassportModule.register({ session: true })],\n  providers: [\n    AuthService,\n    IsUserExistsConstraint,\n    IsConfirmTokenValidConstraint,\n    LocalStrategy,\n    SessionSerializer,\n  ],\n  controllers: [AuthController],\n})\nexport default class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmUser\n                            \n                            \n                                    Async\n                                createConfirmationUrl\n                            \n                            \n                                    Async\n                                sendConfirmationMail\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, utilService: UtilService, configService: ConfigService, redis: RedisClientType)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilService\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    RedisClientType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmUser(undefined: ConfirmUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ConfirmUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConfirmationUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConfirmationUrl(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendConfirmationMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendConfirmationMail(to: string, url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    to\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(data: Prisma.UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { Prisma } from '@prisma/client';\nimport UtilService from '../utils/utils.service';\nimport { v4 } from 'uuid';\nimport { confirmUserPrefix } from './auth.constants';\nimport { ConfigService } from '@nestjs/config';\nimport { REDIS } from '../redis/redis.constants';\nimport { RedisClientType } from '@redis/client';\nimport ConfirmUserDto from './dto/ConfirmUser.dto';\nimport { UserService } from '../user/user.service';\n\n@Injectable()\nexport default class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly utilService: UtilService,\n    private readonly configService: ConfigService,\n    @Inject(REDIS) private readonly redis: RedisClientType,\n  ) {}\n  async signup(data: Prisma.UserCreateInput) {\n    data.password = await bcrypt.hash(data.password, 10);\n    const user = await this.userService.createUser(data);\n    await this.sendConfirmationMail(\n      data.email,\n      await this.createConfirmationUrl(user.id),\n    );\n    return { ...user };\n  }\n\n  async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (!user) {\n      return null;\n    }\n\n    const isValid = await bcrypt.compare(password, user.password);\n\n    if (!isValid) {\n      return null;\n    }\n\n    return { id: user.id, firstname: user.firstname, lastname: user.lastname };\n  }\n\n  async createConfirmationUrl(id: string): Promise {\n    const token = v4();\n    await this.redis.setEx(confirmUserPrefix + token, 3600, id);\n    return `${this.configService.get('ORIGIN')}/auth/confirm/${token}`;\n  }\n\n  async sendConfirmationMail(to: string, url: string) {\n    return this.utilService.sendMail({\n      from: '\"Fred Foo 👻\" ', // sender address\n      to, // list of receivers\n      subject: 'Hello ✔', // Subject line\n      text: 'Hello world?', // plain text body\n      html: `${url}`, // html body\n    });\n  }\n  async confirmUser({ token }: ConfirmUserDto) {\n    const id = await this.redis.v4.get(confirmUserPrefix + token);\n    await this.userService.updateUser(id, { confirmed: true });\n    await this.redis.del(confirmUserPrefix + token);\n    return { success: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmUserDto.html":{"url":"classes/ConfirmUserDto.html","title":"class - ConfirmUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/ConfirmUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsConfirmTokenValid({message: 'Token is invalid or expired!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/ConfirmUser.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsConfirmTokenValid } from '../../validators/IsConfirmTokenValid.validator';\n\nexport default class ConfirmUserDto {\n  @IsConfirmTokenValid({ message: 'Token is invalid or expired!' })\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsAuthenticatedGuard.html":{"url":"guards/IsAuthenticatedGuard.html","title":"guard - IsAuthenticatedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsAuthenticatedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/IsAuthenticated.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/IsAuthenticated.guard.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable({})\nexport default class IsAuthenticatedGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n\n    return request.isAuthenticated();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsConfirmTokenValidConstraint.html":{"url":"injectables/IsConfirmTokenValidConstraint.html","title":"injectable - IsConfirmTokenValidConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsConfirmTokenValidConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validators/IsConfirmTokenValid.validator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: RedisClientType)\n                    \n                \n                        \n                            \n                                Defined in src/validators/IsConfirmTokenValid.validator.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    RedisClientType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/validators/IsConfirmTokenValid.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { RedisClientType } from '@redis/client';\nimport {\n  registerDecorator,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationOptions,\n} from 'class-validator';\nimport { confirmUserPrefix } from '../auth/auth.constants';\nimport { REDIS } from '../redis/redis.constants';\n\n@ValidatorConstraint({ name: 'IsConfirmTokenValid', async: true })\n@Injectable()\nexport class IsConfirmTokenValidConstraint\n  implements ValidatorConstraintInterface\n{\n  constructor(@Inject(REDIS) private readonly redis: RedisClientType) {}\n  async validate(token: string): Promise {\n    return !!(await this.redis.v4.get(confirmUserPrefix + token));\n  }\n}\n\nexport function IsConfirmTokenValid(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsConfirmTokenValidConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsConfirmedGuard.html":{"url":"guards/IsConfirmedGuard.html","title":"guard - IsConfirmedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsConfirmedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/IsConfirmed.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/IsConfirmed.guard.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable({})\nexport default class IsConfirmedGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    return request.user.confirmed;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsUserExistsConstraint.html":{"url":"injectables/IsUserExistsConstraint.html","title":"injectable - IsUserExistsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsUserExistsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validators/IsUserExists.validator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/validators/IsUserExists.validator.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/validators/IsUserExists.validator.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  registerDecorator,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationOptions,\n} from 'class-validator';\nimport { UserService } from '../user/user.service';\n\n@ValidatorConstraint({ name: 'IsEmailExists', async: true })\n@Injectable()\nexport class IsUserExistsConstraint implements ValidatorConstraintInterface {\n  constructor(protected readonly userService: UserService) {}\n  async validate(email: string): Promise {\n    return !(await this.userService.userExists(email));\n  }\n}\n\nexport function IsUserExists(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsUserExistsConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/LocalAuth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/LocalAuth.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable({})\nexport default class LocalAuthGuard extends AuthGuard('local') {\n  async canActivate(context: ExecutionContext) {\n    const result = (await super.canActivate(context)) as boolean;\n    const request = context.switchToHttp().getRequest();\n    await super.logIn(request);\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/local.strategy.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport AuthService from '../auth.service';\n\n@Injectable({})\nexport default class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({ usernameField: 'email' }); // config\n  }\n  async validate(email: string, password: string) {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('incorrect email or password');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/Login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Login.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Login.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class LoginDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addPost\n                            \n                            \n                                findAllPosts\n                            \n                            \n                                findPostById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addPost\n                        \n                    \n                \n            \n            \n                \naddPost(body: AddPostDto, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AddPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllPosts\n                        \n                    \n                \n            \n            \n                \nfindAllPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The list of posts', isArray: true})@Get()\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findPostById\n                        \n                    \n                \n            \n            \n                \nfindPostById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'find a post by id'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/post/post.controller.ts:38\n                \n            \n\n\n            \n                \n                    A method that fetches a post by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport IsAuthenticatedGuard from '../auth/guard/IsAuthenticated.guard';\nimport AddPostDto from './dto/AddPost.dto';\nimport PostService from './post.service';\nimport { Request } from 'express';\nimport IsConfirmedGuard from '../auth/guard/IsConfirmed.guard';\nimport { ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { Post as PostType } from '@prisma/client';\n@ApiTags('Post')\n@Controller('post')\n@UseGuards(IsAuthenticatedGuard, IsConfirmedGuard)\nexport default class PostController {\n  constructor(private readonly postService: PostService) {}\n\n  @Post()\n  addPost(@Body() body: AddPostDto, @Req() req: Request) {\n    return this.postService.addPost(body, req.user.id);\n  }\n\n  @ApiOkResponse({ description: 'The list of posts', isArray: true })\n  @Get()\n  findAllPosts() {\n    return this.postService.findAllPosts();\n  }\n  /**\n   * A method that fetches a post by id\n   */\n  @ApiOkResponse({ description: 'find a post by id' })\n  @Get(':id')\n  findPostById(@Param('id') id: string): Promise {\n    return this.postService.findPostById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPostService\n\nPostService\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport PostController from './post.controller';\nimport PostService from './post.service';\n\n@Module({\n  providers: [PostService],\n  controllers: [PostController],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPost\n                            \n                            \n                                    Async\n                                findAllPosts\n                            \n                            \n                                    Async\n                                findPostById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPost(data: AddPostDto, userId)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AddPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPosts()\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPostById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/post/post.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport AddPostDto from './dto/AddPost.dto';\n\n@Injectable()\nexport default class PostService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async addPost(data: AddPostDto, userId) {\n    const post = { ...data, authorId: userId };\n    const { id } = await this.prisma.post.create({\n      data: post,\n      select: { id: true },\n    });\n    return {\n      id,\n      success: true,\n    };\n  }\n\n  async findAllPosts() {\n    return await this.prisma.post.findMany();\n  }\n\n  async findPostById(id: string) {\n    return await this.prisma.post.findUnique({ where: { id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cleanDatabase\n                            \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        cleanDatabase\n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanDatabase()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  OnModuleInit,\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable({})\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor(private readonly configService: ConfigService) {\n    super();\n  }\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n\n  async cleanDatabase() {\n    if (this.configService.get('NODE_ENV') == 'production') return;\n    const prisma = new PrismaClient();\n    const propertyNames = Object.getOwnPropertyNames(prisma);\n    const modelNames = propertyNames.filter(\n      (propertyName) => !propertyName.startsWith('_'),\n    );\n\n    return Promise.all(modelNames.map((model) => prisma[model].deleteMany()));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { createClient } from 'redis';\nimport { REDIS } from './redis.constants';\n\n@Global()\n@Module({\n  providers: [\n    {\n      provide: REDIS,\n      useFactory: async () => {\n        const client = createClient({\n          legacyMode: true,\n          url: process.env.REDIS_URL,\n        });\n        await client.connect();\n\n        return client;\n      },\n    },\n  ],\n  exports: [REDIS],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionSerializer.html":{"url":"injectables/SessionSerializer.html","title":"injectable - SessionSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/session.serializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PassportSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deserializeUser\n                            \n                            \n                                serializeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/session.serializer.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deserializeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deserializeUser(payload: any, done: (err: Error,user: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/session.serializer.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serializeUser\n                        \n                    \n                \n            \n            \n                \nserializeUser(user: any, done: (err: Error,user: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/session.serializer.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportSerializer } from '@nestjs/passport';\nimport { UserService } from '../user/user.service';\n\n@Injectable()\nexport default class SessionSerializer extends PassportSerializer {\n  constructor(private readonly userService: UserService) {\n    super();\n  }\n  serializeUser(user: any, done: (err: Error, user: any) => void) {\n    done(null, { id: user.id });\n  }\n\n  async deserializeUser(payload: any, done: (err: Error, user: any) => void) {\n    const user = await this.userService.findById(payload.id, {\n      id: true,\n      confirmed: true,\n      email: true,\n      firstname: true,\n      lastname: true,\n    });\n    done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/Signup.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {message: 'please enter a valid email'})@IsUserExists({message: 'Account already exists, please login'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Signup.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Please enter your first name'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Signup.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Please enter your last name.'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Signup.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(6, {message: 'password should be atleast 6 characters'})@NotContains(' ', {message: 'password should contain only letter,symbols and numbers'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/Signup.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform, TransformFnParams } from 'class-transformer';\nimport { IsEmail, IsNotEmpty, MinLength, NotContains } from 'class-validator';\nimport { IsUserExists } from '../../validators/isUserExists.validator';\n\nexport class SignupDto {\n  @IsEmail({}, { message: 'please enter a valid email' })\n  @IsUserExists({ message: 'Account already exists, please login' })\n  email: string;\n\n  @MinLength(6, { message: 'password should be atleast 6 characters' })\n  @NotContains(' ', {\n    message: 'password should contain only letter,symbols and numbers',\n  })\n  @Transform(({ value }: TransformFnParams) => value?.trim())\n  password: string;\n\n  @IsNotEmpty({ message: 'Please enter your first name' })\n  @Transform(({ value }: TransformFnParams) => value?.trim())\n  firstname: string;\n\n  @IsNotEmpty({ message: 'Please enter your last name.' })\n  @Transform(({ value }: TransformFnParams) => value?.trim())\n  lastname: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\n\n@Module({\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                userExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Prisma.UserCreateInput, select?: Prisma.UserSelect)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select\n                                    \n                                            Prisma.UserSelect\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string, select?: Prisma.UserSelect)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select\n                                    \n                                            Prisma.UserSelect\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string, select?: Prisma.UserSelect)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select\n                                    \n                                            Prisma.UserSelect\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: string, data: Prisma.UserUpdateInput, select?: Prisma.UserSelect)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            Prisma.UserUpdateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select\n                                    \n                                            Prisma.UserSelect\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    userExists(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, User } from '@prisma/client';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class UserService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async findByEmail(\n    email: string,\n    select?: Prisma.UserSelect,\n  ): Promise> {\n    return await this.prisma.user.findFirst({\n      where: { email },\n      ...(select && { select }),\n    });\n  }\n\n  async findById(\n    id: string,\n    select?: Prisma.UserSelect,\n  ): Promise> {\n    return await this.prisma.user.findFirst({\n      where: { id },\n      ...(select && { select }),\n    });\n  }\n\n  async createUser(\n    user: Prisma.UserCreateInput,\n    select?: Prisma.UserSelect,\n  ): Promise> {\n    return await this.prisma.user.create({\n      data: user,\n      ...(select && { select }),\n    });\n  }\n\n  async updateUser(\n    id: string,\n    data: Prisma.UserUpdateInput,\n    select?: Prisma.UserSelect,\n  ): Promise> {\n    return await this.prisma.user.update({\n      data,\n      where: { id },\n      ...(select && { select }),\n    });\n  }\n\n  async userExists(email: string): Promise {\n    return !!(await this.prisma.user.count({ where: { email } }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UtilService.html":{"url":"injectables/UtilService.html","title":"injectable - UtilService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/utils.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/utils.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as nodemailer from 'nodemailer';\nimport Mail from 'nodemailer/lib/mailer';\n\n@Injectable()\nexport default class UtilService {\n  async sendMail(options: Mail.Options) {\n    const account = await nodemailer.createTestAccount();\n\n    const transporter = nodemailer.createTransport({\n      host: 'smtp.ethereal.email',\n      port: 587,\n      secure: false, // true for 465, false for other ports\n      auth: {\n        user: account.user, // generated ethereal user\n        pass: account.pass, // generated ethereal password\n      },\n    });\n\n    const info = await transporter.sendMail(options);\n\n    console.log('Message sent: %s', info.messageId);\n    // Preview only available when sending through an Ethereal account\n    console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\n    return info;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UtilsModule.html":{"url":"modules/UtilsModule.html","title":"module - UtilsModule","body":"\n                   \n\n\n\n\n    Modules\n    UtilsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UtilsModule\n\n\n\ncluster_UtilsModule_exports\n\n\n\ncluster_UtilsModule_providers\n\n\n\n\nUtilService \n\nUtilService \n\n\n\nUtilsModule\n\nUtilsModule\n\nUtilService  -->\n\nUtilsModule->UtilService \n\n\n\n\n\nUtilService\n\nUtilService\n\nUtilsModule -->\n\nUtilService->UtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/utils/utils.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UtilService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport UtilService from './utils.service';\n\n@Global()\n@Module({\n  providers: [UtilService],\n  exports: [UtilService],\n})\nexport class UtilsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            confirmUserPrefix\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/dto/ConfirmUser.dto.ts\n            \n            class\n            ConfirmUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/Login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/Signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/guard/IsAuthenticated.guard.ts\n            \n            guard\n            IsAuthenticatedGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guard/IsConfirmed.guard.ts\n            \n            guard\n            IsConfirmedGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guard/LocalAuth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/session.serializer.ts\n            \n            injectable\n            SessionSerializer\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dto/AddPost.dto.ts\n            \n            class\n            AddPostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/redis/redis.constants.ts\n            \n            variable\n            REDIS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/express/mockRequest.ts\n            \n            variable\n            mockRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockAuthService.ts\n            \n            variable\n            mockAuthService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockConfigService.ts\n            \n            variable\n            mockConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockPostService.ts\n            \n            variable\n            mockPostService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockPrismaService.ts\n            \n            variable\n            mockPrismaService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockRedisService.ts\n            \n            variable\n            mockRedisService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockUserService.ts\n            \n            variable\n            mockUserService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test-utils/mocks/services/mockUtilService.ts\n            \n            variable\n            mockUtilService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/utils.service.ts\n            \n            injectable\n            UtilService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/validators/IsConfirmTokenValid.validator.ts\n            \n            injectable\n            IsConfirmTokenValidConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/validators/IsConfirmTokenValid.validator.ts\n            \n            function\n            IsConfirmTokenValid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/validators/IsUserExists.validator.ts\n            \n            injectable\n            IsUserExistsConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/validators/IsUserExists.validator.ts\n            \n            function\n            IsUserExists\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.3\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.3\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.3\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @prisma/client : ^4.0.0\n        \n            @types/express-session : ^1.17.5\n        \n            @types/passport-local : ^1.0.34\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            connect-redis : ^6.1.3\n        \n            cookie-parser : ^1.4.6\n        \n            express-session : ^1.17.3\n        \n            nodemailer : ^6.7.7\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            redis : ^4.2.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.5.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsConfirmTokenValid   (src/.../IsConfirmTokenValid.validator.ts)\n                        \n                        \n                            IsUserExists   (src/.../IsUserExists.validator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/validators/IsConfirmTokenValid.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsConfirmTokenValid\n                        \n                    \n                \n            \n            \n                \nIsConfirmTokenValid(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/validators/IsUserExists.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUserExists\n                        \n                    \n                \n            \n            \n                \nIsUserExists(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UtilsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UtilsModule\n\n\n\ncluster_UtilsModule_exports\n\n\n\ncluster_UtilsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUtilsModule\n\nUtilsModule\n\nAppModule -->\n\nUtilsModule->AppModule\n\n\n\n\n\nUtilService \n\nUtilService \n\nUtilService  -->\n\nUtilsModule->UtilService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nIsConfirmTokenValidConstraint\n\nIsConfirmTokenValidConstraint\n\nAuthModule -->\n\nIsConfirmTokenValidConstraint->AuthModule\n\n\n\n\n\nIsUserExistsConstraint\n\nIsUserExistsConstraint\n\nAuthModule -->\n\nIsUserExistsConstraint->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionSerializer\n\nSessionSerializer\n\nAuthModule -->\n\nSessionSerializer->AuthModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nUtilsModule -->\n\nUtilService->UtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            confirmUserPrefix   (src/.../auth.constants.ts)\n                        \n                        \n                            mockAuthService   (src/.../mockAuthService.ts)\n                        \n                        \n                            mockConfigService   (src/.../mockConfigService.ts)\n                        \n                        \n                            mockPostService   (src/.../mockPostService.ts)\n                        \n                        \n                            mockPrismaService   (src/.../mockPrismaService.ts)\n                        \n                        \n                            mockRedisService   (src/.../mockRedisService.ts)\n                        \n                        \n                            mockRequest   (src/.../mockRequest.ts)\n                        \n                        \n                            mockUserService   (src/.../mockUserService.ts)\n                        \n                        \n                            mockUtilService   (src/.../mockUtilService.ts)\n                        \n                        \n                            REDIS   (src/.../redis.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        confirmUserPrefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user-confirmation:'\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockAuthService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockAuthService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  signup: jest.fn((dto: SignupDto) => {\n    return {\n      id: faker.datatype.uuid(),\n      firstname: dto.firstname,\n      lastname: dto.lastname,\n    };\n  }),\n  login: jest.fn(() =>\n    Promise.resolve({\n      id: faker.datatype.uuid(),\n      firstname: faker.name.firstName(),\n      lastname: faker.name.lastName(),\n    }),\n  ),\n  confirmUser: jest.fn(() => {\n    return {\n      success: true,\n    };\n  }),\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockConfigService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  get: jest.fn((key) => key),\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockPostService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockPostService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  addPost: jest.fn(() => {\n    return {\n      id: faker.datatype.uuid(),\n      success: true,\n    };\n  }),\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockPrismaService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockPrismaService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  user: {\n    create: jest.fn(({ data }) => {\n      return {\n        id: faker.datatype.uuid(),\n        firstname: data.firstname,\n        lastname: data.lastname,\n      };\n    }),\n    findFirst: jest.fn(async () => {\n      return {\n        id: faker.datatype.uuid(),\n        firstname: faker.name.firstName(),\n        lastname: faker.name.lastName(),\n        password: await bcrypt.hash('123456', 10),\n      };\n    }),\n  },\n  post: {\n    create: jest.fn(() =>\n      Promise.resolve({\n        id: faker.datatype.uuid(),\n      }),\n    ),\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockRedisService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockRedisService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  setEx: jest.fn(() => Promise.resolve()),\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/express/mockRequest.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  logout: jest.fn((callback) => {\n    callback();\n  }),\n  user: {\n    id: faker.datatype.uuid(),\n    firstname: faker.name.firstName(),\n    lastname: faker.name.lastName(),\n  },\n} as unknown as Request\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockUserService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockUserService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  createUser: (user: Prisma.UserCreateInput) => {\n    return {\n      id: faker.datatype.uuid(),\n      firstname: user.firstname,\n      lastname: user.lastname,\n    };\n  },\n  findByEmail: async (email: string): Promise => {\n    return {\n      id: faker.datatype.uuid(),\n      email,\n      firstname: faker.name.firstName(),\n      lastname: faker.name.lastName(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      password: await bcrypt.hash('test', 10),\n      confirmed: false,\n    };\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/test-utils/mocks/services/mockUtilService.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockUtilService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UtilService\n\n                    \n                \n                \n                    \n                        Default value : {\n  sendMail: jest.fn(() =>\n    Promise.resolve({\n      accepted: ['test4@gmail.com'],\n      rejected: [],\n      pending: [],\n      envelopeTime: 482,\n      messageTime: 394,\n      messageSize: 775,\n      response:\n        '250 Accepted [STATUS=new MSGID=Yslz4MnYHerE3KlaYsl0QZbmr1scRIdWAAAAAmRsW1.gjzeWFDy-bC0uIx8]',\n      envelope: {\n        from: 'foo@example.com',\n        to: ['test4@gmail.com'],\n      },\n      messageId: '',\n    }),\n  ),\n}\n                    \n                \n\n\n        \n    \n\n    src/redis/redis.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REDIS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('AUTH:REDIS')\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
